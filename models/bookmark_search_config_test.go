// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testBookmarkSearchConfigsUpsert(t *testing.T) {
	t.Parallel()
	if len(bookmarkSearchConfigAllColumns) == len(bookmarkSearchConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BookmarkSearchConfig{}
	if err = randomize.Struct(seed, &o, bookmarkSearchConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookmarkSearchConfig: %s", err)
	}

	count, err := BookmarkSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bookmarkSearchConfigDBTypes, false, bookmarkSearchConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookmarkSearchConfig: %s", err)
	}

	count, err = BookmarkSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBookmarkSearchConfigs(t *testing.T) {
	t.Parallel()

	query := BookmarkSearchConfigs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBookmarkSearchConfigsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookmarkSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookmarkSearchConfigsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BookmarkSearchConfigs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookmarkSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookmarkSearchConfigsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookmarkSearchConfigSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookmarkSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookmarkSearchConfigsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BookmarkSearchConfigExists(ctx, tx, o.K)
	if err != nil {
		t.Errorf("Unable to check if BookmarkSearchConfig exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BookmarkSearchConfigExists to return true, but got false.")
	}
}

func testBookmarkSearchConfigsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bookmarkSearchConfigFound, err := FindBookmarkSearchConfig(ctx, tx, o.K)
	if err != nil {
		t.Error(err)
	}

	if bookmarkSearchConfigFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBookmarkSearchConfigsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BookmarkSearchConfigs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBookmarkSearchConfigsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BookmarkSearchConfigs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBookmarkSearchConfigsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bookmarkSearchConfigOne := &BookmarkSearchConfig{}
	bookmarkSearchConfigTwo := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, bookmarkSearchConfigOne, bookmarkSearchConfigDBTypes, false, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, bookmarkSearchConfigTwo, bookmarkSearchConfigDBTypes, false, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookmarkSearchConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookmarkSearchConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookmarkSearchConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBookmarkSearchConfigsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bookmarkSearchConfigOne := &BookmarkSearchConfig{}
	bookmarkSearchConfigTwo := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, bookmarkSearchConfigOne, bookmarkSearchConfigDBTypes, false, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, bookmarkSearchConfigTwo, bookmarkSearchConfigDBTypes, false, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookmarkSearchConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookmarkSearchConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bookmarkSearchConfigBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchConfig) error {
	*o = BookmarkSearchConfig{}
	return nil
}

func bookmarkSearchConfigAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchConfig) error {
	*o = BookmarkSearchConfig{}
	return nil
}

func bookmarkSearchConfigAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchConfig) error {
	*o = BookmarkSearchConfig{}
	return nil
}

func bookmarkSearchConfigBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchConfig) error {
	*o = BookmarkSearchConfig{}
	return nil
}

func bookmarkSearchConfigAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchConfig) error {
	*o = BookmarkSearchConfig{}
	return nil
}

func bookmarkSearchConfigBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchConfig) error {
	*o = BookmarkSearchConfig{}
	return nil
}

func bookmarkSearchConfigAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchConfig) error {
	*o = BookmarkSearchConfig{}
	return nil
}

func bookmarkSearchConfigBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchConfig) error {
	*o = BookmarkSearchConfig{}
	return nil
}

func bookmarkSearchConfigAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchConfig) error {
	*o = BookmarkSearchConfig{}
	return nil
}

func testBookmarkSearchConfigsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BookmarkSearchConfig{}
	o := &BookmarkSearchConfig{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig object: %s", err)
	}

	AddBookmarkSearchConfigHook(boil.BeforeInsertHook, bookmarkSearchConfigBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchConfigBeforeInsertHooks = []BookmarkSearchConfigHook{}

	AddBookmarkSearchConfigHook(boil.AfterInsertHook, bookmarkSearchConfigAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchConfigAfterInsertHooks = []BookmarkSearchConfigHook{}

	AddBookmarkSearchConfigHook(boil.AfterSelectHook, bookmarkSearchConfigAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchConfigAfterSelectHooks = []BookmarkSearchConfigHook{}

	AddBookmarkSearchConfigHook(boil.BeforeUpdateHook, bookmarkSearchConfigBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchConfigBeforeUpdateHooks = []BookmarkSearchConfigHook{}

	AddBookmarkSearchConfigHook(boil.AfterUpdateHook, bookmarkSearchConfigAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchConfigAfterUpdateHooks = []BookmarkSearchConfigHook{}

	AddBookmarkSearchConfigHook(boil.BeforeDeleteHook, bookmarkSearchConfigBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchConfigBeforeDeleteHooks = []BookmarkSearchConfigHook{}

	AddBookmarkSearchConfigHook(boil.AfterDeleteHook, bookmarkSearchConfigAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchConfigAfterDeleteHooks = []BookmarkSearchConfigHook{}

	AddBookmarkSearchConfigHook(boil.BeforeUpsertHook, bookmarkSearchConfigBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchConfigBeforeUpsertHooks = []BookmarkSearchConfigHook{}

	AddBookmarkSearchConfigHook(boil.AfterUpsertHook, bookmarkSearchConfigAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchConfigAfterUpsertHooks = []BookmarkSearchConfigHook{}
}

func testBookmarkSearchConfigsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookmarkSearchConfigsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bookmarkSearchConfigColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookmarkSearchConfigsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookmarkSearchConfigsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookmarkSearchConfigSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookmarkSearchConfigsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookmarkSearchConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bookmarkSearchConfigDBTypes = map[string]string{`K`: ``, `V`: ``}
	_                           = bytes.MinRead
)

func testBookmarkSearchConfigsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bookmarkSearchConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bookmarkSearchConfigAllColumns) == len(bookmarkSearchConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBookmarkSearchConfigsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bookmarkSearchConfigAllColumns) == len(bookmarkSearchConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchConfig{}
	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookmarkSearchConfigDBTypes, true, bookmarkSearchConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchConfig struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bookmarkSearchConfigAllColumns, bookmarkSearchConfigPrimaryKeyColumns) {
		fields = bookmarkSearchConfigAllColumns
	} else {
		fields = strmangle.SetComplement(
			bookmarkSearchConfigAllColumns,
			bookmarkSearchConfigPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BookmarkSearchConfigSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
