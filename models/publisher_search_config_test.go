// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testPublisherSearchConfigsUpsert(t *testing.T) {
	t.Parallel()
	if len(publisherSearchConfigAllColumns) == len(publisherSearchConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PublisherSearchConfig{}
	if err = randomize.Struct(seed, &o, publisherSearchConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PublisherSearchConfig: %s", err)
	}

	count, err := PublisherSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, publisherSearchConfigDBTypes, false, publisherSearchConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PublisherSearchConfig: %s", err)
	}

	count, err = PublisherSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPublisherSearchConfigs(t *testing.T) {
	t.Parallel()

	query := PublisherSearchConfigs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPublisherSearchConfigsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherSearchConfigsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PublisherSearchConfigs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherSearchConfigsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublisherSearchConfigSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherSearchConfigsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PublisherSearchConfigExists(ctx, tx, o.K)
	if err != nil {
		t.Errorf("Unable to check if PublisherSearchConfig exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PublisherSearchConfigExists to return true, but got false.")
	}
}

func testPublisherSearchConfigsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	publisherSearchConfigFound, err := FindPublisherSearchConfig(ctx, tx, o.K)
	if err != nil {
		t.Error(err)
	}

	if publisherSearchConfigFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPublisherSearchConfigsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PublisherSearchConfigs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPublisherSearchConfigsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PublisherSearchConfigs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPublisherSearchConfigsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherSearchConfigOne := &PublisherSearchConfig{}
	publisherSearchConfigTwo := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, publisherSearchConfigOne, publisherSearchConfigDBTypes, false, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherSearchConfigTwo, publisherSearchConfigDBTypes, false, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = publisherSearchConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publisherSearchConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PublisherSearchConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPublisherSearchConfigsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	publisherSearchConfigOne := &PublisherSearchConfig{}
	publisherSearchConfigTwo := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, publisherSearchConfigOne, publisherSearchConfigDBTypes, false, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherSearchConfigTwo, publisherSearchConfigDBTypes, false, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = publisherSearchConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publisherSearchConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func publisherSearchConfigBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchConfig) error {
	*o = PublisherSearchConfig{}
	return nil
}

func publisherSearchConfigAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchConfig) error {
	*o = PublisherSearchConfig{}
	return nil
}

func publisherSearchConfigAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchConfig) error {
	*o = PublisherSearchConfig{}
	return nil
}

func publisherSearchConfigBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchConfig) error {
	*o = PublisherSearchConfig{}
	return nil
}

func publisherSearchConfigAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchConfig) error {
	*o = PublisherSearchConfig{}
	return nil
}

func publisherSearchConfigBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchConfig) error {
	*o = PublisherSearchConfig{}
	return nil
}

func publisherSearchConfigAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchConfig) error {
	*o = PublisherSearchConfig{}
	return nil
}

func publisherSearchConfigBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchConfig) error {
	*o = PublisherSearchConfig{}
	return nil
}

func publisherSearchConfigAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchConfig) error {
	*o = PublisherSearchConfig{}
	return nil
}

func testPublisherSearchConfigsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PublisherSearchConfig{}
	o := &PublisherSearchConfig{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig object: %s", err)
	}

	AddPublisherSearchConfigHook(boil.BeforeInsertHook, publisherSearchConfigBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	publisherSearchConfigBeforeInsertHooks = []PublisherSearchConfigHook{}

	AddPublisherSearchConfigHook(boil.AfterInsertHook, publisherSearchConfigAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	publisherSearchConfigAfterInsertHooks = []PublisherSearchConfigHook{}

	AddPublisherSearchConfigHook(boil.AfterSelectHook, publisherSearchConfigAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	publisherSearchConfigAfterSelectHooks = []PublisherSearchConfigHook{}

	AddPublisherSearchConfigHook(boil.BeforeUpdateHook, publisherSearchConfigBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	publisherSearchConfigBeforeUpdateHooks = []PublisherSearchConfigHook{}

	AddPublisherSearchConfigHook(boil.AfterUpdateHook, publisherSearchConfigAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	publisherSearchConfigAfterUpdateHooks = []PublisherSearchConfigHook{}

	AddPublisherSearchConfigHook(boil.BeforeDeleteHook, publisherSearchConfigBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	publisherSearchConfigBeforeDeleteHooks = []PublisherSearchConfigHook{}

	AddPublisherSearchConfigHook(boil.AfterDeleteHook, publisherSearchConfigAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	publisherSearchConfigAfterDeleteHooks = []PublisherSearchConfigHook{}

	AddPublisherSearchConfigHook(boil.BeforeUpsertHook, publisherSearchConfigBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	publisherSearchConfigBeforeUpsertHooks = []PublisherSearchConfigHook{}

	AddPublisherSearchConfigHook(boil.AfterUpsertHook, publisherSearchConfigAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	publisherSearchConfigAfterUpsertHooks = []PublisherSearchConfigHook{}
}

func testPublisherSearchConfigsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublisherSearchConfigsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(publisherSearchConfigColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PublisherSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublisherSearchConfigsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPublisherSearchConfigsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublisherSearchConfigSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPublisherSearchConfigsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PublisherSearchConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	publisherSearchConfigDBTypes = map[string]string{`K`: ``, `V`: ``}
	_                            = bytes.MinRead
)

func testPublisherSearchConfigsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(publisherSearchConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(publisherSearchConfigAllColumns) == len(publisherSearchConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPublisherSearchConfigsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(publisherSearchConfigAllColumns) == len(publisherSearchConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchConfig{}
	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherSearchConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publisherSearchConfigDBTypes, true, publisherSearchConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchConfig struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(publisherSearchConfigAllColumns, publisherSearchConfigPrimaryKeyColumns) {
		fields = publisherSearchConfigAllColumns
	} else {
		fields = strmangle.SetComplement(
			publisherSearchConfigAllColumns,
			publisherSearchConfigPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PublisherSearchConfigSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
