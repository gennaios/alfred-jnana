// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FileSearchConfig is an object representing the database table.
type FileSearchConfig struct {
	K string      `boil:"k" json:"k" toml:"k" yaml:"k"`
	V null.String `boil:"v" json:"v,omitempty" toml:"v" yaml:"v,omitempty"`

	R *fileSearchConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fileSearchConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FileSearchConfigColumns = struct {
	K string
	V string
}{
	K: "k",
	V: "v",
}

var FileSearchConfigTableColumns = struct {
	K string
	V string
}{
	K: "file_search_config.k",
	V: "file_search_config.v",
}

// Generated where

var FileSearchConfigWhere = struct {
	K whereHelperstring
	V whereHelpernull_String
}{
	K: whereHelperstring{field: "\"file_search_config\".\"k\""},
	V: whereHelpernull_String{field: "\"file_search_config\".\"v\""},
}

// FileSearchConfigRels is where relationship names are stored.
var FileSearchConfigRels = struct {
}{}

// fileSearchConfigR is where relationships are stored.
type fileSearchConfigR struct {
}

// NewStruct creates a new relationship struct
func (*fileSearchConfigR) NewStruct() *fileSearchConfigR {
	return &fileSearchConfigR{}
}

// fileSearchConfigL is where Load methods for each relationship are stored.
type fileSearchConfigL struct{}

var (
	fileSearchConfigAllColumns            = []string{"k", "v"}
	fileSearchConfigColumnsWithoutDefault = []string{"k", "v"}
	fileSearchConfigColumnsWithDefault    = []string{}
	fileSearchConfigPrimaryKeyColumns     = []string{"k"}
	fileSearchConfigGeneratedColumns      = []string{}
)

type (
	// FileSearchConfigSlice is an alias for a slice of pointers to FileSearchConfig.
	// This should almost always be used instead of []FileSearchConfig.
	FileSearchConfigSlice []*FileSearchConfig
	// FileSearchConfigHook is the signature for custom FileSearchConfig hook methods
	FileSearchConfigHook func(context.Context, boil.ContextExecutor, *FileSearchConfig) error

	fileSearchConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fileSearchConfigType                 = reflect.TypeOf(&FileSearchConfig{})
	fileSearchConfigMapping              = queries.MakeStructMapping(fileSearchConfigType)
	fileSearchConfigPrimaryKeyMapping, _ = queries.BindMapping(fileSearchConfigType, fileSearchConfigMapping, fileSearchConfigPrimaryKeyColumns)
	fileSearchConfigInsertCacheMut       sync.RWMutex
	fileSearchConfigInsertCache          = make(map[string]insertCache)
	fileSearchConfigUpdateCacheMut       sync.RWMutex
	fileSearchConfigUpdateCache          = make(map[string]updateCache)
	fileSearchConfigUpsertCacheMut       sync.RWMutex
	fileSearchConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fileSearchConfigAfterSelectHooks []FileSearchConfigHook

var fileSearchConfigBeforeInsertHooks []FileSearchConfigHook
var fileSearchConfigAfterInsertHooks []FileSearchConfigHook

var fileSearchConfigBeforeUpdateHooks []FileSearchConfigHook
var fileSearchConfigAfterUpdateHooks []FileSearchConfigHook

var fileSearchConfigBeforeDeleteHooks []FileSearchConfigHook
var fileSearchConfigAfterDeleteHooks []FileSearchConfigHook

var fileSearchConfigBeforeUpsertHooks []FileSearchConfigHook
var fileSearchConfigAfterUpsertHooks []FileSearchConfigHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FileSearchConfig) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchConfigAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FileSearchConfig) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchConfigBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FileSearchConfig) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchConfigAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FileSearchConfig) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchConfigBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FileSearchConfig) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchConfigAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FileSearchConfig) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchConfigBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FileSearchConfig) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchConfigAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FileSearchConfig) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchConfigBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FileSearchConfig) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchConfigAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFileSearchConfigHook registers your hook function for all future operations.
func AddFileSearchConfigHook(hookPoint boil.HookPoint, fileSearchConfigHook FileSearchConfigHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fileSearchConfigAfterSelectHooks = append(fileSearchConfigAfterSelectHooks, fileSearchConfigHook)
	case boil.BeforeInsertHook:
		fileSearchConfigBeforeInsertHooks = append(fileSearchConfigBeforeInsertHooks, fileSearchConfigHook)
	case boil.AfterInsertHook:
		fileSearchConfigAfterInsertHooks = append(fileSearchConfigAfterInsertHooks, fileSearchConfigHook)
	case boil.BeforeUpdateHook:
		fileSearchConfigBeforeUpdateHooks = append(fileSearchConfigBeforeUpdateHooks, fileSearchConfigHook)
	case boil.AfterUpdateHook:
		fileSearchConfigAfterUpdateHooks = append(fileSearchConfigAfterUpdateHooks, fileSearchConfigHook)
	case boil.BeforeDeleteHook:
		fileSearchConfigBeforeDeleteHooks = append(fileSearchConfigBeforeDeleteHooks, fileSearchConfigHook)
	case boil.AfterDeleteHook:
		fileSearchConfigAfterDeleteHooks = append(fileSearchConfigAfterDeleteHooks, fileSearchConfigHook)
	case boil.BeforeUpsertHook:
		fileSearchConfigBeforeUpsertHooks = append(fileSearchConfigBeforeUpsertHooks, fileSearchConfigHook)
	case boil.AfterUpsertHook:
		fileSearchConfigAfterUpsertHooks = append(fileSearchConfigAfterUpsertHooks, fileSearchConfigHook)
	}
}

// One returns a single fileSearchConfig record from the query.
func (q fileSearchConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FileSearchConfig, error) {
	o := &FileSearchConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for file_search_config")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FileSearchConfig records from the query.
func (q fileSearchConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (FileSearchConfigSlice, error) {
	var o []*FileSearchConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FileSearchConfig slice")
	}

	if len(fileSearchConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FileSearchConfig records in the query.
func (q fileSearchConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count file_search_config rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fileSearchConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if file_search_config exists")
	}

	return count > 0, nil
}

// FileSearchConfigs retrieves all the records using an executor.
func FileSearchConfigs(mods ...qm.QueryMod) fileSearchConfigQuery {
	mods = append(mods, qm.From("\"file_search_config\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"file_search_config\".*"})
	}

	return fileSearchConfigQuery{q}
}

// FindFileSearchConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFileSearchConfig(ctx context.Context, exec boil.ContextExecutor, k string, selectCols ...string) (*FileSearchConfig, error) {
	fileSearchConfigObj := &FileSearchConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"file_search_config\" where \"k\"=?", sel,
	)

	q := queries.Raw(query, k)

	err := q.Bind(ctx, exec, fileSearchConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from file_search_config")
	}

	if err = fileSearchConfigObj.doAfterSelectHooks(ctx, exec); err != nil {
		return fileSearchConfigObj, err
	}

	return fileSearchConfigObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FileSearchConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no file_search_config provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fileSearchConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fileSearchConfigInsertCacheMut.RLock()
	cache, cached := fileSearchConfigInsertCache[key]
	fileSearchConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fileSearchConfigAllColumns,
			fileSearchConfigColumnsWithDefault,
			fileSearchConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fileSearchConfigType, fileSearchConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fileSearchConfigType, fileSearchConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"file_search_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"file_search_config\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into file_search_config")
	}

	if !cached {
		fileSearchConfigInsertCacheMut.Lock()
		fileSearchConfigInsertCache[key] = cache
		fileSearchConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FileSearchConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FileSearchConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fileSearchConfigUpdateCacheMut.RLock()
	cache, cached := fileSearchConfigUpdateCache[key]
	fileSearchConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fileSearchConfigAllColumns,
			fileSearchConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update file_search_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"file_search_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, fileSearchConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fileSearchConfigType, fileSearchConfigMapping, append(wl, fileSearchConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update file_search_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for file_search_config")
	}

	if !cached {
		fileSearchConfigUpdateCacheMut.Lock()
		fileSearchConfigUpdateCache[key] = cache
		fileSearchConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fileSearchConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for file_search_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for file_search_config")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FileSearchConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileSearchConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"file_search_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fileSearchConfigPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fileSearchConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fileSearchConfig")
	}
	return rowsAff, nil
}

// Delete deletes a single FileSearchConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FileSearchConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FileSearchConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fileSearchConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"file_search_config\" WHERE \"k\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from file_search_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for file_search_config")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fileSearchConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fileSearchConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from file_search_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for file_search_config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FileSearchConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fileSearchConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileSearchConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"file_search_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fileSearchConfigPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fileSearchConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for file_search_config")
	}

	if len(fileSearchConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FileSearchConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFileSearchConfig(ctx, exec, o.K)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FileSearchConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FileSearchConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileSearchConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"file_search_config\".* FROM \"file_search_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fileSearchConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FileSearchConfigSlice")
	}

	*o = slice

	return nil
}

// FileSearchConfigExists checks if the FileSearchConfig row exists.
func FileSearchConfigExists(ctx context.Context, exec boil.ContextExecutor, k string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"file_search_config\" where \"k\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, k)
	}
	row := exec.QueryRowContext(ctx, sql, k)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if file_search_config exists")
	}

	return exists, nil
}

// Exists checks if the FileSearchConfig row exists.
func (o *FileSearchConfig) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FileSearchConfigExists(ctx, exec, o.K)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FileSearchConfig) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no file_search_config provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fileSearchConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fileSearchConfigUpsertCacheMut.RLock()
	cache, cached := fileSearchConfigUpsertCache[key]
	fileSearchConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fileSearchConfigAllColumns,
			fileSearchConfigColumnsWithDefault,
			fileSearchConfigColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			fileSearchConfigAllColumns,
			fileSearchConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert file_search_config, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(fileSearchConfigPrimaryKeyColumns))
			copy(conflict, fileSearchConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"file_search_config\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(fileSearchConfigType, fileSearchConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fileSearchConfigType, fileSearchConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert file_search_config")
	}

	if !cached {
		fileSearchConfigUpsertCacheMut.Lock()
		fileSearchConfigUpsertCache[key] = cache
		fileSearchConfigUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
