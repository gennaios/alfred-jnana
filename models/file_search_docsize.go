// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FileSearchDocsize is an object representing the database table.
type FileSearchDocsize struct {
	ID null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	SZ null.Bytes `boil:"sz" json:"sz,omitempty" toml:"sz" yaml:"sz,omitempty"`

	R *fileSearchDocsizeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fileSearchDocsizeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FileSearchDocsizeColumns = struct {
	ID string
	SZ string
}{
	ID: "id",
	SZ: "sz",
}

var FileSearchDocsizeTableColumns = struct {
	ID string
	SZ string
}{
	ID: "file_search_docsize.id",
	SZ: "file_search_docsize.sz",
}

// Generated where

var FileSearchDocsizeWhere = struct {
	ID whereHelpernull_Int64
	SZ whereHelpernull_Bytes
}{
	ID: whereHelpernull_Int64{field: "\"file_search_docsize\".\"id\""},
	SZ: whereHelpernull_Bytes{field: "\"file_search_docsize\".\"sz\""},
}

// FileSearchDocsizeRels is where relationship names are stored.
var FileSearchDocsizeRels = struct {
}{}

// fileSearchDocsizeR is where relationships are stored.
type fileSearchDocsizeR struct {
}

// NewStruct creates a new relationship struct
func (*fileSearchDocsizeR) NewStruct() *fileSearchDocsizeR {
	return &fileSearchDocsizeR{}
}

// fileSearchDocsizeL is where Load methods for each relationship are stored.
type fileSearchDocsizeL struct{}

var (
	fileSearchDocsizeAllColumns            = []string{"id", "sz"}
	fileSearchDocsizeColumnsWithoutDefault = []string{"sz"}
	fileSearchDocsizeColumnsWithDefault    = []string{"id"}
	fileSearchDocsizePrimaryKeyColumns     = []string{"id"}
	fileSearchDocsizeGeneratedColumns      = []string{}
)

type (
	// FileSearchDocsizeSlice is an alias for a slice of pointers to FileSearchDocsize.
	// This should almost always be used instead of []FileSearchDocsize.
	FileSearchDocsizeSlice []*FileSearchDocsize
	// FileSearchDocsizeHook is the signature for custom FileSearchDocsize hook methods
	FileSearchDocsizeHook func(context.Context, boil.ContextExecutor, *FileSearchDocsize) error

	fileSearchDocsizeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fileSearchDocsizeType                 = reflect.TypeOf(&FileSearchDocsize{})
	fileSearchDocsizeMapping              = queries.MakeStructMapping(fileSearchDocsizeType)
	fileSearchDocsizePrimaryKeyMapping, _ = queries.BindMapping(fileSearchDocsizeType, fileSearchDocsizeMapping, fileSearchDocsizePrimaryKeyColumns)
	fileSearchDocsizeInsertCacheMut       sync.RWMutex
	fileSearchDocsizeInsertCache          = make(map[string]insertCache)
	fileSearchDocsizeUpdateCacheMut       sync.RWMutex
	fileSearchDocsizeUpdateCache          = make(map[string]updateCache)
	fileSearchDocsizeUpsertCacheMut       sync.RWMutex
	fileSearchDocsizeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fileSearchDocsizeAfterSelectHooks []FileSearchDocsizeHook

var fileSearchDocsizeBeforeInsertHooks []FileSearchDocsizeHook
var fileSearchDocsizeAfterInsertHooks []FileSearchDocsizeHook

var fileSearchDocsizeBeforeUpdateHooks []FileSearchDocsizeHook
var fileSearchDocsizeAfterUpdateHooks []FileSearchDocsizeHook

var fileSearchDocsizeBeforeDeleteHooks []FileSearchDocsizeHook
var fileSearchDocsizeAfterDeleteHooks []FileSearchDocsizeHook

var fileSearchDocsizeBeforeUpsertHooks []FileSearchDocsizeHook
var fileSearchDocsizeAfterUpsertHooks []FileSearchDocsizeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FileSearchDocsize) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchDocsizeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FileSearchDocsize) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchDocsizeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FileSearchDocsize) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchDocsizeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FileSearchDocsize) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchDocsizeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FileSearchDocsize) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchDocsizeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FileSearchDocsize) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchDocsizeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FileSearchDocsize) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchDocsizeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FileSearchDocsize) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchDocsizeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FileSearchDocsize) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileSearchDocsizeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFileSearchDocsizeHook registers your hook function for all future operations.
func AddFileSearchDocsizeHook(hookPoint boil.HookPoint, fileSearchDocsizeHook FileSearchDocsizeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fileSearchDocsizeAfterSelectHooks = append(fileSearchDocsizeAfterSelectHooks, fileSearchDocsizeHook)
	case boil.BeforeInsertHook:
		fileSearchDocsizeBeforeInsertHooks = append(fileSearchDocsizeBeforeInsertHooks, fileSearchDocsizeHook)
	case boil.AfterInsertHook:
		fileSearchDocsizeAfterInsertHooks = append(fileSearchDocsizeAfterInsertHooks, fileSearchDocsizeHook)
	case boil.BeforeUpdateHook:
		fileSearchDocsizeBeforeUpdateHooks = append(fileSearchDocsizeBeforeUpdateHooks, fileSearchDocsizeHook)
	case boil.AfterUpdateHook:
		fileSearchDocsizeAfterUpdateHooks = append(fileSearchDocsizeAfterUpdateHooks, fileSearchDocsizeHook)
	case boil.BeforeDeleteHook:
		fileSearchDocsizeBeforeDeleteHooks = append(fileSearchDocsizeBeforeDeleteHooks, fileSearchDocsizeHook)
	case boil.AfterDeleteHook:
		fileSearchDocsizeAfterDeleteHooks = append(fileSearchDocsizeAfterDeleteHooks, fileSearchDocsizeHook)
	case boil.BeforeUpsertHook:
		fileSearchDocsizeBeforeUpsertHooks = append(fileSearchDocsizeBeforeUpsertHooks, fileSearchDocsizeHook)
	case boil.AfterUpsertHook:
		fileSearchDocsizeAfterUpsertHooks = append(fileSearchDocsizeAfterUpsertHooks, fileSearchDocsizeHook)
	}
}

// One returns a single fileSearchDocsize record from the query.
func (q fileSearchDocsizeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FileSearchDocsize, error) {
	o := &FileSearchDocsize{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for file_search_docsize")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FileSearchDocsize records from the query.
func (q fileSearchDocsizeQuery) All(ctx context.Context, exec boil.ContextExecutor) (FileSearchDocsizeSlice, error) {
	var o []*FileSearchDocsize

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FileSearchDocsize slice")
	}

	if len(fileSearchDocsizeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FileSearchDocsize records in the query.
func (q fileSearchDocsizeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count file_search_docsize rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fileSearchDocsizeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if file_search_docsize exists")
	}

	return count > 0, nil
}

// FileSearchDocsizes retrieves all the records using an executor.
func FileSearchDocsizes(mods ...qm.QueryMod) fileSearchDocsizeQuery {
	mods = append(mods, qm.From("\"file_search_docsize\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"file_search_docsize\".*"})
	}

	return fileSearchDocsizeQuery{q}
}

// FindFileSearchDocsize retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFileSearchDocsize(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*FileSearchDocsize, error) {
	fileSearchDocsizeObj := &FileSearchDocsize{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"file_search_docsize\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, fileSearchDocsizeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from file_search_docsize")
	}

	if err = fileSearchDocsizeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return fileSearchDocsizeObj, err
	}

	return fileSearchDocsizeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FileSearchDocsize) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no file_search_docsize provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fileSearchDocsizeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fileSearchDocsizeInsertCacheMut.RLock()
	cache, cached := fileSearchDocsizeInsertCache[key]
	fileSearchDocsizeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fileSearchDocsizeAllColumns,
			fileSearchDocsizeColumnsWithDefault,
			fileSearchDocsizeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fileSearchDocsizeType, fileSearchDocsizeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fileSearchDocsizeType, fileSearchDocsizeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"file_search_docsize\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"file_search_docsize\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into file_search_docsize")
	}

	if !cached {
		fileSearchDocsizeInsertCacheMut.Lock()
		fileSearchDocsizeInsertCache[key] = cache
		fileSearchDocsizeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FileSearchDocsize.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FileSearchDocsize) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fileSearchDocsizeUpdateCacheMut.RLock()
	cache, cached := fileSearchDocsizeUpdateCache[key]
	fileSearchDocsizeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fileSearchDocsizeAllColumns,
			fileSearchDocsizePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update file_search_docsize, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"file_search_docsize\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, fileSearchDocsizePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fileSearchDocsizeType, fileSearchDocsizeMapping, append(wl, fileSearchDocsizePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update file_search_docsize row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for file_search_docsize")
	}

	if !cached {
		fileSearchDocsizeUpdateCacheMut.Lock()
		fileSearchDocsizeUpdateCache[key] = cache
		fileSearchDocsizeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fileSearchDocsizeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for file_search_docsize")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for file_search_docsize")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FileSearchDocsizeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileSearchDocsizePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"file_search_docsize\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fileSearchDocsizePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fileSearchDocsize slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fileSearchDocsize")
	}
	return rowsAff, nil
}

// Delete deletes a single FileSearchDocsize record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FileSearchDocsize) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FileSearchDocsize provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fileSearchDocsizePrimaryKeyMapping)
	sql := "DELETE FROM \"file_search_docsize\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from file_search_docsize")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for file_search_docsize")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fileSearchDocsizeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fileSearchDocsizeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from file_search_docsize")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for file_search_docsize")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FileSearchDocsizeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fileSearchDocsizeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileSearchDocsizePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"file_search_docsize\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fileSearchDocsizePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fileSearchDocsize slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for file_search_docsize")
	}

	if len(fileSearchDocsizeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FileSearchDocsize) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFileSearchDocsize(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FileSearchDocsizeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FileSearchDocsizeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileSearchDocsizePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"file_search_docsize\".* FROM \"file_search_docsize\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fileSearchDocsizePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FileSearchDocsizeSlice")
	}

	*o = slice

	return nil
}

// FileSearchDocsizeExists checks if the FileSearchDocsize row exists.
func FileSearchDocsizeExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"file_search_docsize\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if file_search_docsize exists")
	}

	return exists, nil
}

// Exists checks if the FileSearchDocsize row exists.
func (o *FileSearchDocsize) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FileSearchDocsizeExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FileSearchDocsize) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no file_search_docsize provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fileSearchDocsizeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fileSearchDocsizeUpsertCacheMut.RLock()
	cache, cached := fileSearchDocsizeUpsertCache[key]
	fileSearchDocsizeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fileSearchDocsizeAllColumns,
			fileSearchDocsizeColumnsWithDefault,
			fileSearchDocsizeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			fileSearchDocsizeAllColumns,
			fileSearchDocsizePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert file_search_docsize, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(fileSearchDocsizePrimaryKeyColumns))
			copy(conflict, fileSearchDocsizePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"file_search_docsize\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(fileSearchDocsizeType, fileSearchDocsizeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fileSearchDocsizeType, fileSearchDocsizeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert file_search_docsize")
	}

	if !cached {
		fileSearchDocsizeUpsertCacheMut.Lock()
		fileSearchDocsizeUpsertCache[key] = cache
		fileSearchDocsizeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
