// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BookmarkSearchIdx is an object representing the database table.
type BookmarkSearchIdx struct {
	Segid string      `boil:"segid" json:"segid" toml:"segid" yaml:"segid"`
	Term  string      `boil:"term" json:"term" toml:"term" yaml:"term"`
	Pgno  null.String `boil:"pgno" json:"pgno,omitempty" toml:"pgno" yaml:"pgno,omitempty"`

	R *bookmarkSearchIdxR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookmarkSearchIdxL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookmarkSearchIdxColumns = struct {
	Segid string
	Term  string
	Pgno  string
}{
	Segid: "segid",
	Term:  "term",
	Pgno:  "pgno",
}

var BookmarkSearchIdxTableColumns = struct {
	Segid string
	Term  string
	Pgno  string
}{
	Segid: "bookmark_search_idx.segid",
	Term:  "bookmark_search_idx.term",
	Pgno:  "bookmark_search_idx.pgno",
}

// Generated where

var BookmarkSearchIdxWhere = struct {
	Segid whereHelperstring
	Term  whereHelperstring
	Pgno  whereHelpernull_String
}{
	Segid: whereHelperstring{field: "\"bookmark_search_idx\".\"segid\""},
	Term:  whereHelperstring{field: "\"bookmark_search_idx\".\"term\""},
	Pgno:  whereHelpernull_String{field: "\"bookmark_search_idx\".\"pgno\""},
}

// BookmarkSearchIdxRels is where relationship names are stored.
var BookmarkSearchIdxRels = struct {
}{}

// bookmarkSearchIdxR is where relationships are stored.
type bookmarkSearchIdxR struct {
}

// NewStruct creates a new relationship struct
func (*bookmarkSearchIdxR) NewStruct() *bookmarkSearchIdxR {
	return &bookmarkSearchIdxR{}
}

// bookmarkSearchIdxL is where Load methods for each relationship are stored.
type bookmarkSearchIdxL struct{}

var (
	bookmarkSearchIdxAllColumns            = []string{"segid", "term", "pgno"}
	bookmarkSearchIdxColumnsWithoutDefault = []string{"segid", "term", "pgno"}
	bookmarkSearchIdxColumnsWithDefault    = []string{}
	bookmarkSearchIdxPrimaryKeyColumns     = []string{"segid", "term"}
	bookmarkSearchIdxGeneratedColumns      = []string{}
)

type (
	// BookmarkSearchIdxSlice is an alias for a slice of pointers to BookmarkSearchIdx.
	// This should almost always be used instead of []BookmarkSearchIdx.
	BookmarkSearchIdxSlice []*BookmarkSearchIdx
	// BookmarkSearchIdxHook is the signature for custom BookmarkSearchIdx hook methods
	BookmarkSearchIdxHook func(context.Context, boil.ContextExecutor, *BookmarkSearchIdx) error

	bookmarkSearchIdxQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookmarkSearchIdxType                 = reflect.TypeOf(&BookmarkSearchIdx{})
	bookmarkSearchIdxMapping              = queries.MakeStructMapping(bookmarkSearchIdxType)
	bookmarkSearchIdxPrimaryKeyMapping, _ = queries.BindMapping(bookmarkSearchIdxType, bookmarkSearchIdxMapping, bookmarkSearchIdxPrimaryKeyColumns)
	bookmarkSearchIdxInsertCacheMut       sync.RWMutex
	bookmarkSearchIdxInsertCache          = make(map[string]insertCache)
	bookmarkSearchIdxUpdateCacheMut       sync.RWMutex
	bookmarkSearchIdxUpdateCache          = make(map[string]updateCache)
	bookmarkSearchIdxUpsertCacheMut       sync.RWMutex
	bookmarkSearchIdxUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookmarkSearchIdxAfterSelectHooks []BookmarkSearchIdxHook

var bookmarkSearchIdxBeforeInsertHooks []BookmarkSearchIdxHook
var bookmarkSearchIdxAfterInsertHooks []BookmarkSearchIdxHook

var bookmarkSearchIdxBeforeUpdateHooks []BookmarkSearchIdxHook
var bookmarkSearchIdxAfterUpdateHooks []BookmarkSearchIdxHook

var bookmarkSearchIdxBeforeDeleteHooks []BookmarkSearchIdxHook
var bookmarkSearchIdxAfterDeleteHooks []BookmarkSearchIdxHook

var bookmarkSearchIdxBeforeUpsertHooks []BookmarkSearchIdxHook
var bookmarkSearchIdxAfterUpsertHooks []BookmarkSearchIdxHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BookmarkSearchIdx) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchIdxAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BookmarkSearchIdx) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchIdxBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BookmarkSearchIdx) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchIdxAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BookmarkSearchIdx) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchIdxBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BookmarkSearchIdx) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchIdxAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BookmarkSearchIdx) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchIdxBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BookmarkSearchIdx) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchIdxAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BookmarkSearchIdx) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchIdxBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BookmarkSearchIdx) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchIdxAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookmarkSearchIdxHook registers your hook function for all future operations.
func AddBookmarkSearchIdxHook(hookPoint boil.HookPoint, bookmarkSearchIdxHook BookmarkSearchIdxHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bookmarkSearchIdxAfterSelectHooks = append(bookmarkSearchIdxAfterSelectHooks, bookmarkSearchIdxHook)
	case boil.BeforeInsertHook:
		bookmarkSearchIdxBeforeInsertHooks = append(bookmarkSearchIdxBeforeInsertHooks, bookmarkSearchIdxHook)
	case boil.AfterInsertHook:
		bookmarkSearchIdxAfterInsertHooks = append(bookmarkSearchIdxAfterInsertHooks, bookmarkSearchIdxHook)
	case boil.BeforeUpdateHook:
		bookmarkSearchIdxBeforeUpdateHooks = append(bookmarkSearchIdxBeforeUpdateHooks, bookmarkSearchIdxHook)
	case boil.AfterUpdateHook:
		bookmarkSearchIdxAfterUpdateHooks = append(bookmarkSearchIdxAfterUpdateHooks, bookmarkSearchIdxHook)
	case boil.BeforeDeleteHook:
		bookmarkSearchIdxBeforeDeleteHooks = append(bookmarkSearchIdxBeforeDeleteHooks, bookmarkSearchIdxHook)
	case boil.AfterDeleteHook:
		bookmarkSearchIdxAfterDeleteHooks = append(bookmarkSearchIdxAfterDeleteHooks, bookmarkSearchIdxHook)
	case boil.BeforeUpsertHook:
		bookmarkSearchIdxBeforeUpsertHooks = append(bookmarkSearchIdxBeforeUpsertHooks, bookmarkSearchIdxHook)
	case boil.AfterUpsertHook:
		bookmarkSearchIdxAfterUpsertHooks = append(bookmarkSearchIdxAfterUpsertHooks, bookmarkSearchIdxHook)
	}
}

// One returns a single bookmarkSearchIdx record from the query.
func (q bookmarkSearchIdxQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BookmarkSearchIdx, error) {
	o := &BookmarkSearchIdx{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bookmark_search_idx")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BookmarkSearchIdx records from the query.
func (q bookmarkSearchIdxQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookmarkSearchIdxSlice, error) {
	var o []*BookmarkSearchIdx

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BookmarkSearchIdx slice")
	}

	if len(bookmarkSearchIdxAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BookmarkSearchIdx records in the query.
func (q bookmarkSearchIdxQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bookmark_search_idx rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bookmarkSearchIdxQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bookmark_search_idx exists")
	}

	return count > 0, nil
}

// BookmarkSearchIdxes retrieves all the records using an executor.
func BookmarkSearchIdxes(mods ...qm.QueryMod) bookmarkSearchIdxQuery {
	mods = append(mods, qm.From("\"bookmark_search_idx\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bookmark_search_idx\".*"})
	}

	return bookmarkSearchIdxQuery{q}
}

// FindBookmarkSearchIdx retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBookmarkSearchIdx(ctx context.Context, exec boil.ContextExecutor, segid string, term string, selectCols ...string) (*BookmarkSearchIdx, error) {
	bookmarkSearchIdxObj := &BookmarkSearchIdx{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bookmark_search_idx\" where \"segid\"=? AND \"term\"=?", sel,
	)

	q := queries.Raw(query, segid, term)

	err := q.Bind(ctx, exec, bookmarkSearchIdxObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bookmark_search_idx")
	}

	if err = bookmarkSearchIdxObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bookmarkSearchIdxObj, err
	}

	return bookmarkSearchIdxObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BookmarkSearchIdx) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bookmark_search_idx provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookmarkSearchIdxColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookmarkSearchIdxInsertCacheMut.RLock()
	cache, cached := bookmarkSearchIdxInsertCache[key]
	bookmarkSearchIdxInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookmarkSearchIdxAllColumns,
			bookmarkSearchIdxColumnsWithDefault,
			bookmarkSearchIdxColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookmarkSearchIdxType, bookmarkSearchIdxMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookmarkSearchIdxType, bookmarkSearchIdxMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bookmark_search_idx\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bookmark_search_idx\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bookmark_search_idx")
	}

	if !cached {
		bookmarkSearchIdxInsertCacheMut.Lock()
		bookmarkSearchIdxInsertCache[key] = cache
		bookmarkSearchIdxInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BookmarkSearchIdx.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BookmarkSearchIdx) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookmarkSearchIdxUpdateCacheMut.RLock()
	cache, cached := bookmarkSearchIdxUpdateCache[key]
	bookmarkSearchIdxUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookmarkSearchIdxAllColumns,
			bookmarkSearchIdxPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bookmark_search_idx, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bookmark_search_idx\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, bookmarkSearchIdxPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookmarkSearchIdxType, bookmarkSearchIdxMapping, append(wl, bookmarkSearchIdxPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bookmark_search_idx row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bookmark_search_idx")
	}

	if !cached {
		bookmarkSearchIdxUpdateCacheMut.Lock()
		bookmarkSearchIdxUpdateCache[key] = cache
		bookmarkSearchIdxUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bookmarkSearchIdxQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bookmark_search_idx")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bookmark_search_idx")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookmarkSearchIdxSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookmarkSearchIdxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bookmark_search_idx\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookmarkSearchIdxPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bookmarkSearchIdx slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bookmarkSearchIdx")
	}
	return rowsAff, nil
}

// Delete deletes a single BookmarkSearchIdx record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BookmarkSearchIdx) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BookmarkSearchIdx provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookmarkSearchIdxPrimaryKeyMapping)
	sql := "DELETE FROM \"bookmark_search_idx\" WHERE \"segid\"=? AND \"term\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bookmark_search_idx")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bookmark_search_idx")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bookmarkSearchIdxQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bookmarkSearchIdxQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bookmark_search_idx")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bookmark_search_idx")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookmarkSearchIdxSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bookmarkSearchIdxBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookmarkSearchIdxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bookmark_search_idx\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookmarkSearchIdxPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bookmarkSearchIdx slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bookmark_search_idx")
	}

	if len(bookmarkSearchIdxAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BookmarkSearchIdx) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBookmarkSearchIdx(ctx, exec, o.Segid, o.Term)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookmarkSearchIdxSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookmarkSearchIdxSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookmarkSearchIdxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bookmark_search_idx\".* FROM \"bookmark_search_idx\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookmarkSearchIdxPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BookmarkSearchIdxSlice")
	}

	*o = slice

	return nil
}

// BookmarkSearchIdxExists checks if the BookmarkSearchIdx row exists.
func BookmarkSearchIdxExists(ctx context.Context, exec boil.ContextExecutor, segid string, term string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bookmark_search_idx\" where \"segid\"=? AND \"term\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, segid, term)
	}
	row := exec.QueryRowContext(ctx, sql, segid, term)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bookmark_search_idx exists")
	}

	return exists, nil
}

// Exists checks if the BookmarkSearchIdx row exists.
func (o *BookmarkSearchIdx) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BookmarkSearchIdxExists(ctx, exec, o.Segid, o.Term)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BookmarkSearchIdx) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bookmark_search_idx provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookmarkSearchIdxColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookmarkSearchIdxUpsertCacheMut.RLock()
	cache, cached := bookmarkSearchIdxUpsertCache[key]
	bookmarkSearchIdxUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bookmarkSearchIdxAllColumns,
			bookmarkSearchIdxColumnsWithDefault,
			bookmarkSearchIdxColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bookmarkSearchIdxAllColumns,
			bookmarkSearchIdxPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bookmark_search_idx, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bookmarkSearchIdxPrimaryKeyColumns))
			copy(conflict, bookmarkSearchIdxPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"bookmark_search_idx\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bookmarkSearchIdxType, bookmarkSearchIdxMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookmarkSearchIdxType, bookmarkSearchIdxMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bookmark_search_idx")
	}

	if !cached {
		bookmarkSearchIdxUpsertCacheMut.Lock()
		bookmarkSearchIdxUpsertCache[key] = cache
		bookmarkSearchIdxUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
