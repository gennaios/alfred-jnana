// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testCreatorsUpsert(t *testing.T) {
	t.Parallel()
	if len(creatorAllColumns) == len(creatorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Creator{}
	if err = randomize.Struct(seed, &o, creatorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Creator: %s", err)
	}

	count, err := Creators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, creatorDBTypes, false, creatorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Creator: %s", err)
	}

	count, err = Creators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCreators(t *testing.T) {
	t.Parallel()

	query := Creators()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCreatorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Creators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCreatorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Creators().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Creators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCreatorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CreatorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Creators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCreatorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CreatorExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Creator exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CreatorExists to return true, but got false.")
	}
}

func testCreatorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	creatorFound, err := FindCreator(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if creatorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCreatorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Creators().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCreatorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Creators().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCreatorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	creatorOne := &Creator{}
	creatorTwo := &Creator{}
	if err = randomize.Struct(seed, creatorOne, creatorDBTypes, false, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}
	if err = randomize.Struct(seed, creatorTwo, creatorDBTypes, false, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = creatorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = creatorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Creators().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCreatorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	creatorOne := &Creator{}
	creatorTwo := &Creator{}
	if err = randomize.Struct(seed, creatorOne, creatorDBTypes, false, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}
	if err = randomize.Struct(seed, creatorTwo, creatorDBTypes, false, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = creatorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = creatorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Creators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func creatorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Creator) error {
	*o = Creator{}
	return nil
}

func creatorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Creator) error {
	*o = Creator{}
	return nil
}

func creatorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Creator) error {
	*o = Creator{}
	return nil
}

func creatorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Creator) error {
	*o = Creator{}
	return nil
}

func creatorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Creator) error {
	*o = Creator{}
	return nil
}

func creatorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Creator) error {
	*o = Creator{}
	return nil
}

func creatorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Creator) error {
	*o = Creator{}
	return nil
}

func creatorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Creator) error {
	*o = Creator{}
	return nil
}

func creatorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Creator) error {
	*o = Creator{}
	return nil
}

func testCreatorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Creator{}
	o := &Creator{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, creatorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Creator object: %s", err)
	}

	AddCreatorHook(boil.BeforeInsertHook, creatorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	creatorBeforeInsertHooks = []CreatorHook{}

	AddCreatorHook(boil.AfterInsertHook, creatorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	creatorAfterInsertHooks = []CreatorHook{}

	AddCreatorHook(boil.AfterSelectHook, creatorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	creatorAfterSelectHooks = []CreatorHook{}

	AddCreatorHook(boil.BeforeUpdateHook, creatorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	creatorBeforeUpdateHooks = []CreatorHook{}

	AddCreatorHook(boil.AfterUpdateHook, creatorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	creatorAfterUpdateHooks = []CreatorHook{}

	AddCreatorHook(boil.BeforeDeleteHook, creatorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	creatorBeforeDeleteHooks = []CreatorHook{}

	AddCreatorHook(boil.AfterDeleteHook, creatorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	creatorAfterDeleteHooks = []CreatorHook{}

	AddCreatorHook(boil.BeforeUpsertHook, creatorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	creatorBeforeUpsertHooks = []CreatorHook{}

	AddCreatorHook(boil.AfterUpsertHook, creatorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	creatorAfterUpsertHooks = []CreatorHook{}
}

func testCreatorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Creators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCreatorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(creatorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Creators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCreatorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCreatorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CreatorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCreatorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Creators().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	creatorDBTypes = map[string]string{`ID`: `INTEGER`, `Name`: `TEXT`}
	_              = bytes.MinRead
)

func testCreatorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(creatorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(creatorAllColumns) == len(creatorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Creators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCreatorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(creatorAllColumns) == len(creatorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Creator{}
	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Creators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, creatorDBTypes, true, creatorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Creator struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(creatorAllColumns, creatorPrimaryKeyColumns) {
		fields = creatorAllColumns
	} else {
		fields = strmangle.SetComplement(
			creatorAllColumns,
			creatorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CreatorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
