// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testFileSearchIdxesUpsert(t *testing.T) {
	t.Parallel()
	if len(fileSearchIdxAllColumns) == len(fileSearchIdxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FileSearchIdx{}
	if err = randomize.Struct(seed, &o, fileSearchIdxDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FileSearchIdx: %s", err)
	}

	count, err := FileSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, fileSearchIdxDBTypes, false, fileSearchIdxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FileSearchIdx: %s", err)
	}

	count, err = FileSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFileSearchIdxes(t *testing.T) {
	t.Parallel()

	query := FileSearchIdxes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFileSearchIdxesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FileSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFileSearchIdxesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FileSearchIdxes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FileSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFileSearchIdxesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FileSearchIdxSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FileSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFileSearchIdxesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FileSearchIdxExists(ctx, tx, o.Segid, o.Term)
	if err != nil {
		t.Errorf("Unable to check if FileSearchIdx exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FileSearchIdxExists to return true, but got false.")
	}
}

func testFileSearchIdxesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	fileSearchIdxFound, err := FindFileSearchIdx(ctx, tx, o.Segid, o.Term)
	if err != nil {
		t.Error(err)
	}

	if fileSearchIdxFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFileSearchIdxesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FileSearchIdxes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFileSearchIdxesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FileSearchIdxes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFileSearchIdxesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fileSearchIdxOne := &FileSearchIdx{}
	fileSearchIdxTwo := &FileSearchIdx{}
	if err = randomize.Struct(seed, fileSearchIdxOne, fileSearchIdxDBTypes, false, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}
	if err = randomize.Struct(seed, fileSearchIdxTwo, fileSearchIdxDBTypes, false, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fileSearchIdxOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fileSearchIdxTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FileSearchIdxes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFileSearchIdxesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	fileSearchIdxOne := &FileSearchIdx{}
	fileSearchIdxTwo := &FileSearchIdx{}
	if err = randomize.Struct(seed, fileSearchIdxOne, fileSearchIdxDBTypes, false, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}
	if err = randomize.Struct(seed, fileSearchIdxTwo, fileSearchIdxDBTypes, false, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fileSearchIdxOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fileSearchIdxTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FileSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func fileSearchIdxBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchIdx) error {
	*o = FileSearchIdx{}
	return nil
}

func fileSearchIdxAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchIdx) error {
	*o = FileSearchIdx{}
	return nil
}

func fileSearchIdxAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchIdx) error {
	*o = FileSearchIdx{}
	return nil
}

func fileSearchIdxBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchIdx) error {
	*o = FileSearchIdx{}
	return nil
}

func fileSearchIdxAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchIdx) error {
	*o = FileSearchIdx{}
	return nil
}

func fileSearchIdxBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchIdx) error {
	*o = FileSearchIdx{}
	return nil
}

func fileSearchIdxAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchIdx) error {
	*o = FileSearchIdx{}
	return nil
}

func fileSearchIdxBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchIdx) error {
	*o = FileSearchIdx{}
	return nil
}

func fileSearchIdxAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchIdx) error {
	*o = FileSearchIdx{}
	return nil
}

func testFileSearchIdxesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FileSearchIdx{}
	o := &FileSearchIdx{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx object: %s", err)
	}

	AddFileSearchIdxHook(boil.BeforeInsertHook, fileSearchIdxBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	fileSearchIdxBeforeInsertHooks = []FileSearchIdxHook{}

	AddFileSearchIdxHook(boil.AfterInsertHook, fileSearchIdxAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	fileSearchIdxAfterInsertHooks = []FileSearchIdxHook{}

	AddFileSearchIdxHook(boil.AfterSelectHook, fileSearchIdxAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	fileSearchIdxAfterSelectHooks = []FileSearchIdxHook{}

	AddFileSearchIdxHook(boil.BeforeUpdateHook, fileSearchIdxBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	fileSearchIdxBeforeUpdateHooks = []FileSearchIdxHook{}

	AddFileSearchIdxHook(boil.AfterUpdateHook, fileSearchIdxAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	fileSearchIdxAfterUpdateHooks = []FileSearchIdxHook{}

	AddFileSearchIdxHook(boil.BeforeDeleteHook, fileSearchIdxBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	fileSearchIdxBeforeDeleteHooks = []FileSearchIdxHook{}

	AddFileSearchIdxHook(boil.AfterDeleteHook, fileSearchIdxAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	fileSearchIdxAfterDeleteHooks = []FileSearchIdxHook{}

	AddFileSearchIdxHook(boil.BeforeUpsertHook, fileSearchIdxBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	fileSearchIdxBeforeUpsertHooks = []FileSearchIdxHook{}

	AddFileSearchIdxHook(boil.AfterUpsertHook, fileSearchIdxAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	fileSearchIdxAfterUpsertHooks = []FileSearchIdxHook{}
}

func testFileSearchIdxesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FileSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFileSearchIdxesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(fileSearchIdxColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FileSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFileSearchIdxesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFileSearchIdxesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FileSearchIdxSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFileSearchIdxesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FileSearchIdxes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	fileSearchIdxDBTypes = map[string]string{`Segid`: ``, `Term`: ``, `Pgno`: ``}
	_                    = bytes.MinRead
)

func testFileSearchIdxesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(fileSearchIdxPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(fileSearchIdxAllColumns) == len(fileSearchIdxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FileSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFileSearchIdxesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(fileSearchIdxAllColumns) == len(fileSearchIdxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchIdx{}
	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FileSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fileSearchIdxDBTypes, true, fileSearchIdxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FileSearchIdx struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(fileSearchIdxAllColumns, fileSearchIdxPrimaryKeyColumns) {
		fields = fileSearchIdxAllColumns
	} else {
		fields = strmangle.SetComplement(
			fileSearchIdxAllColumns,
			fileSearchIdxPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FileSearchIdxSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
