// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testFileSearchDataUpsert(t *testing.T) {
	t.Parallel()
	if len(fileSearchDatumAllColumns) == len(fileSearchDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FileSearchDatum{}
	if err = randomize.Struct(seed, &o, fileSearchDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FileSearchDatum: %s", err)
	}

	count, err := FileSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, fileSearchDatumDBTypes, false, fileSearchDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FileSearchDatum: %s", err)
	}

	count, err = FileSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFileSearchData(t *testing.T) {
	t.Parallel()

	query := FileSearchData()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFileSearchDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FileSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFileSearchDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FileSearchData().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FileSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFileSearchDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FileSearchDatumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FileSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFileSearchDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FileSearchDatumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if FileSearchDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FileSearchDatumExists to return true, but got false.")
	}
}

func testFileSearchDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	fileSearchDatumFound, err := FindFileSearchDatum(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if fileSearchDatumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFileSearchDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FileSearchData().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFileSearchDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FileSearchData().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFileSearchDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fileSearchDatumOne := &FileSearchDatum{}
	fileSearchDatumTwo := &FileSearchDatum{}
	if err = randomize.Struct(seed, fileSearchDatumOne, fileSearchDatumDBTypes, false, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, fileSearchDatumTwo, fileSearchDatumDBTypes, false, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fileSearchDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fileSearchDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FileSearchData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFileSearchDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	fileSearchDatumOne := &FileSearchDatum{}
	fileSearchDatumTwo := &FileSearchDatum{}
	if err = randomize.Struct(seed, fileSearchDatumOne, fileSearchDatumDBTypes, false, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, fileSearchDatumTwo, fileSearchDatumDBTypes, false, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fileSearchDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fileSearchDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FileSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func fileSearchDatumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchDatum) error {
	*o = FileSearchDatum{}
	return nil
}

func fileSearchDatumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchDatum) error {
	*o = FileSearchDatum{}
	return nil
}

func fileSearchDatumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchDatum) error {
	*o = FileSearchDatum{}
	return nil
}

func fileSearchDatumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchDatum) error {
	*o = FileSearchDatum{}
	return nil
}

func fileSearchDatumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchDatum) error {
	*o = FileSearchDatum{}
	return nil
}

func fileSearchDatumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchDatum) error {
	*o = FileSearchDatum{}
	return nil
}

func fileSearchDatumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchDatum) error {
	*o = FileSearchDatum{}
	return nil
}

func fileSearchDatumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchDatum) error {
	*o = FileSearchDatum{}
	return nil
}

func fileSearchDatumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FileSearchDatum) error {
	*o = FileSearchDatum{}
	return nil
}

func testFileSearchDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FileSearchDatum{}
	o := &FileSearchDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum object: %s", err)
	}

	AddFileSearchDatumHook(boil.BeforeInsertHook, fileSearchDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	fileSearchDatumBeforeInsertHooks = []FileSearchDatumHook{}

	AddFileSearchDatumHook(boil.AfterInsertHook, fileSearchDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	fileSearchDatumAfterInsertHooks = []FileSearchDatumHook{}

	AddFileSearchDatumHook(boil.AfterSelectHook, fileSearchDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	fileSearchDatumAfterSelectHooks = []FileSearchDatumHook{}

	AddFileSearchDatumHook(boil.BeforeUpdateHook, fileSearchDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	fileSearchDatumBeforeUpdateHooks = []FileSearchDatumHook{}

	AddFileSearchDatumHook(boil.AfterUpdateHook, fileSearchDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	fileSearchDatumAfterUpdateHooks = []FileSearchDatumHook{}

	AddFileSearchDatumHook(boil.BeforeDeleteHook, fileSearchDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	fileSearchDatumBeforeDeleteHooks = []FileSearchDatumHook{}

	AddFileSearchDatumHook(boil.AfterDeleteHook, fileSearchDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	fileSearchDatumAfterDeleteHooks = []FileSearchDatumHook{}

	AddFileSearchDatumHook(boil.BeforeUpsertHook, fileSearchDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	fileSearchDatumBeforeUpsertHooks = []FileSearchDatumHook{}

	AddFileSearchDatumHook(boil.AfterUpsertHook, fileSearchDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	fileSearchDatumAfterUpsertHooks = []FileSearchDatumHook{}
}

func testFileSearchDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FileSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFileSearchDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(fileSearchDatumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FileSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFileSearchDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFileSearchDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FileSearchDatumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFileSearchDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FileSearchData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	fileSearchDatumDBTypes = map[string]string{`ID`: `INTEGER`, `Block`: `BLOB`}
	_                      = bytes.MinRead
)

func testFileSearchDataUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(fileSearchDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(fileSearchDatumAllColumns) == len(fileSearchDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FileSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFileSearchDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(fileSearchDatumAllColumns) == len(fileSearchDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FileSearchDatum{}
	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FileSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fileSearchDatumDBTypes, true, fileSearchDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FileSearchDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(fileSearchDatumAllColumns, fileSearchDatumPrimaryKeyColumns) {
		fields = fileSearchDatumAllColumns
	} else {
		fields = strmangle.SetComplement(
			fileSearchDatumAllColumns,
			fileSearchDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FileSearchDatumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
