// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testBookmarkSearchDataUpsert(t *testing.T) {
	t.Parallel()
	if len(bookmarkSearchDatumAllColumns) == len(bookmarkSearchDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BookmarkSearchDatum{}
	if err = randomize.Struct(seed, &o, bookmarkSearchDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookmarkSearchDatum: %s", err)
	}

	count, err := BookmarkSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bookmarkSearchDatumDBTypes, false, bookmarkSearchDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookmarkSearchDatum: %s", err)
	}

	count, err = BookmarkSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBookmarkSearchData(t *testing.T) {
	t.Parallel()

	query := BookmarkSearchData()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBookmarkSearchDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookmarkSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookmarkSearchDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BookmarkSearchData().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookmarkSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookmarkSearchDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookmarkSearchDatumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookmarkSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookmarkSearchDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BookmarkSearchDatumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BookmarkSearchDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BookmarkSearchDatumExists to return true, but got false.")
	}
}

func testBookmarkSearchDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bookmarkSearchDatumFound, err := FindBookmarkSearchDatum(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if bookmarkSearchDatumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBookmarkSearchDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BookmarkSearchData().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBookmarkSearchDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BookmarkSearchData().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBookmarkSearchDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bookmarkSearchDatumOne := &BookmarkSearchDatum{}
	bookmarkSearchDatumTwo := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, bookmarkSearchDatumOne, bookmarkSearchDatumDBTypes, false, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, bookmarkSearchDatumTwo, bookmarkSearchDatumDBTypes, false, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookmarkSearchDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookmarkSearchDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookmarkSearchData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBookmarkSearchDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bookmarkSearchDatumOne := &BookmarkSearchDatum{}
	bookmarkSearchDatumTwo := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, bookmarkSearchDatumOne, bookmarkSearchDatumDBTypes, false, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, bookmarkSearchDatumTwo, bookmarkSearchDatumDBTypes, false, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookmarkSearchDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookmarkSearchDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bookmarkSearchDatumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchDatum) error {
	*o = BookmarkSearchDatum{}
	return nil
}

func bookmarkSearchDatumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchDatum) error {
	*o = BookmarkSearchDatum{}
	return nil
}

func bookmarkSearchDatumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchDatum) error {
	*o = BookmarkSearchDatum{}
	return nil
}

func bookmarkSearchDatumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchDatum) error {
	*o = BookmarkSearchDatum{}
	return nil
}

func bookmarkSearchDatumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchDatum) error {
	*o = BookmarkSearchDatum{}
	return nil
}

func bookmarkSearchDatumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchDatum) error {
	*o = BookmarkSearchDatum{}
	return nil
}

func bookmarkSearchDatumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchDatum) error {
	*o = BookmarkSearchDatum{}
	return nil
}

func bookmarkSearchDatumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchDatum) error {
	*o = BookmarkSearchDatum{}
	return nil
}

func bookmarkSearchDatumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchDatum) error {
	*o = BookmarkSearchDatum{}
	return nil
}

func testBookmarkSearchDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BookmarkSearchDatum{}
	o := &BookmarkSearchDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum object: %s", err)
	}

	AddBookmarkSearchDatumHook(boil.BeforeInsertHook, bookmarkSearchDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchDatumBeforeInsertHooks = []BookmarkSearchDatumHook{}

	AddBookmarkSearchDatumHook(boil.AfterInsertHook, bookmarkSearchDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchDatumAfterInsertHooks = []BookmarkSearchDatumHook{}

	AddBookmarkSearchDatumHook(boil.AfterSelectHook, bookmarkSearchDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchDatumAfterSelectHooks = []BookmarkSearchDatumHook{}

	AddBookmarkSearchDatumHook(boil.BeforeUpdateHook, bookmarkSearchDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchDatumBeforeUpdateHooks = []BookmarkSearchDatumHook{}

	AddBookmarkSearchDatumHook(boil.AfterUpdateHook, bookmarkSearchDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchDatumAfterUpdateHooks = []BookmarkSearchDatumHook{}

	AddBookmarkSearchDatumHook(boil.BeforeDeleteHook, bookmarkSearchDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchDatumBeforeDeleteHooks = []BookmarkSearchDatumHook{}

	AddBookmarkSearchDatumHook(boil.AfterDeleteHook, bookmarkSearchDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchDatumAfterDeleteHooks = []BookmarkSearchDatumHook{}

	AddBookmarkSearchDatumHook(boil.BeforeUpsertHook, bookmarkSearchDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchDatumBeforeUpsertHooks = []BookmarkSearchDatumHook{}

	AddBookmarkSearchDatumHook(boil.AfterUpsertHook, bookmarkSearchDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchDatumAfterUpsertHooks = []BookmarkSearchDatumHook{}
}

func testBookmarkSearchDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookmarkSearchDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bookmarkSearchDatumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookmarkSearchDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookmarkSearchDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookmarkSearchDatumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookmarkSearchDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookmarkSearchData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bookmarkSearchDatumDBTypes = map[string]string{`ID`: `INTEGER`, `Block`: `BLOB`}
	_                          = bytes.MinRead
)

func testBookmarkSearchDataUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bookmarkSearchDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bookmarkSearchDatumAllColumns) == len(bookmarkSearchDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBookmarkSearchDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bookmarkSearchDatumAllColumns) == len(bookmarkSearchDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchDatum{}
	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookmarkSearchDatumDBTypes, true, bookmarkSearchDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bookmarkSearchDatumAllColumns, bookmarkSearchDatumPrimaryKeyColumns) {
		fields = bookmarkSearchDatumAllColumns
	} else {
		fields = strmangle.SetComplement(
			bookmarkSearchDatumAllColumns,
			bookmarkSearchDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BookmarkSearchDatumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
