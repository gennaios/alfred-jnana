// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BookmarkSearchConfig is an object representing the database table.
type BookmarkSearchConfig struct {
	K string      `boil:"k" json:"k" toml:"k" yaml:"k"`
	V null.String `boil:"v" json:"v,omitempty" toml:"v" yaml:"v,omitempty"`

	R *bookmarkSearchConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookmarkSearchConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookmarkSearchConfigColumns = struct {
	K string
	V string
}{
	K: "k",
	V: "v",
}

var BookmarkSearchConfigTableColumns = struct {
	K string
	V string
}{
	K: "bookmark_search_config.k",
	V: "bookmark_search_config.v",
}

// Generated where

var BookmarkSearchConfigWhere = struct {
	K whereHelperstring
	V whereHelpernull_String
}{
	K: whereHelperstring{field: "\"bookmark_search_config\".\"k\""},
	V: whereHelpernull_String{field: "\"bookmark_search_config\".\"v\""},
}

// BookmarkSearchConfigRels is where relationship names are stored.
var BookmarkSearchConfigRels = struct {
}{}

// bookmarkSearchConfigR is where relationships are stored.
type bookmarkSearchConfigR struct {
}

// NewStruct creates a new relationship struct
func (*bookmarkSearchConfigR) NewStruct() *bookmarkSearchConfigR {
	return &bookmarkSearchConfigR{}
}

// bookmarkSearchConfigL is where Load methods for each relationship are stored.
type bookmarkSearchConfigL struct{}

var (
	bookmarkSearchConfigAllColumns            = []string{"k", "v"}
	bookmarkSearchConfigColumnsWithoutDefault = []string{"k", "v"}
	bookmarkSearchConfigColumnsWithDefault    = []string{}
	bookmarkSearchConfigPrimaryKeyColumns     = []string{"k"}
)

type (
	// BookmarkSearchConfigSlice is an alias for a slice of pointers to BookmarkSearchConfig.
	// This should almost always be used instead of []BookmarkSearchConfig.
	BookmarkSearchConfigSlice []*BookmarkSearchConfig
	// BookmarkSearchConfigHook is the signature for custom BookmarkSearchConfig hook methods
	BookmarkSearchConfigHook func(context.Context, boil.ContextExecutor, *BookmarkSearchConfig) error

	bookmarkSearchConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookmarkSearchConfigType                 = reflect.TypeOf(&BookmarkSearchConfig{})
	bookmarkSearchConfigMapping              = queries.MakeStructMapping(bookmarkSearchConfigType)
	bookmarkSearchConfigPrimaryKeyMapping, _ = queries.BindMapping(bookmarkSearchConfigType, bookmarkSearchConfigMapping, bookmarkSearchConfigPrimaryKeyColumns)
	bookmarkSearchConfigInsertCacheMut       sync.RWMutex
	bookmarkSearchConfigInsertCache          = make(map[string]insertCache)
	bookmarkSearchConfigUpdateCacheMut       sync.RWMutex
	bookmarkSearchConfigUpdateCache          = make(map[string]updateCache)
	bookmarkSearchConfigUpsertCacheMut       sync.RWMutex
	bookmarkSearchConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookmarkSearchConfigBeforeInsertHooks []BookmarkSearchConfigHook
var bookmarkSearchConfigBeforeUpdateHooks []BookmarkSearchConfigHook
var bookmarkSearchConfigBeforeDeleteHooks []BookmarkSearchConfigHook
var bookmarkSearchConfigBeforeUpsertHooks []BookmarkSearchConfigHook

var bookmarkSearchConfigAfterInsertHooks []BookmarkSearchConfigHook
var bookmarkSearchConfigAfterSelectHooks []BookmarkSearchConfigHook
var bookmarkSearchConfigAfterUpdateHooks []BookmarkSearchConfigHook
var bookmarkSearchConfigAfterDeleteHooks []BookmarkSearchConfigHook
var bookmarkSearchConfigAfterUpsertHooks []BookmarkSearchConfigHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BookmarkSearchConfig) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchConfigBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BookmarkSearchConfig) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchConfigBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BookmarkSearchConfig) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchConfigBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BookmarkSearchConfig) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchConfigBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BookmarkSearchConfig) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchConfigAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BookmarkSearchConfig) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchConfigAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BookmarkSearchConfig) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchConfigAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BookmarkSearchConfig) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchConfigAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BookmarkSearchConfig) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookmarkSearchConfigAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookmarkSearchConfigHook registers your hook function for all future operations.
func AddBookmarkSearchConfigHook(hookPoint boil.HookPoint, bookmarkSearchConfigHook BookmarkSearchConfigHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		bookmarkSearchConfigBeforeInsertHooks = append(bookmarkSearchConfigBeforeInsertHooks, bookmarkSearchConfigHook)
	case boil.BeforeUpdateHook:
		bookmarkSearchConfigBeforeUpdateHooks = append(bookmarkSearchConfigBeforeUpdateHooks, bookmarkSearchConfigHook)
	case boil.BeforeDeleteHook:
		bookmarkSearchConfigBeforeDeleteHooks = append(bookmarkSearchConfigBeforeDeleteHooks, bookmarkSearchConfigHook)
	case boil.BeforeUpsertHook:
		bookmarkSearchConfigBeforeUpsertHooks = append(bookmarkSearchConfigBeforeUpsertHooks, bookmarkSearchConfigHook)
	case boil.AfterInsertHook:
		bookmarkSearchConfigAfterInsertHooks = append(bookmarkSearchConfigAfterInsertHooks, bookmarkSearchConfigHook)
	case boil.AfterSelectHook:
		bookmarkSearchConfigAfterSelectHooks = append(bookmarkSearchConfigAfterSelectHooks, bookmarkSearchConfigHook)
	case boil.AfterUpdateHook:
		bookmarkSearchConfigAfterUpdateHooks = append(bookmarkSearchConfigAfterUpdateHooks, bookmarkSearchConfigHook)
	case boil.AfterDeleteHook:
		bookmarkSearchConfigAfterDeleteHooks = append(bookmarkSearchConfigAfterDeleteHooks, bookmarkSearchConfigHook)
	case boil.AfterUpsertHook:
		bookmarkSearchConfigAfterUpsertHooks = append(bookmarkSearchConfigAfterUpsertHooks, bookmarkSearchConfigHook)
	}
}

// One returns a single bookmarkSearchConfig record from the query.
func (q bookmarkSearchConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BookmarkSearchConfig, error) {
	o := &BookmarkSearchConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bookmark_search_config")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BookmarkSearchConfig records from the query.
func (q bookmarkSearchConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookmarkSearchConfigSlice, error) {
	var o []*BookmarkSearchConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BookmarkSearchConfig slice")
	}

	if len(bookmarkSearchConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BookmarkSearchConfig records in the query.
func (q bookmarkSearchConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bookmark_search_config rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bookmarkSearchConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bookmark_search_config exists")
	}

	return count > 0, nil
}

// BookmarkSearchConfigs retrieves all the records using an executor.
func BookmarkSearchConfigs(mods ...qm.QueryMod) bookmarkSearchConfigQuery {
	mods = append(mods, qm.From("\"bookmark_search_config\""))
	return bookmarkSearchConfigQuery{NewQuery(mods...)}
}

// FindBookmarkSearchConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBookmarkSearchConfig(ctx context.Context, exec boil.ContextExecutor, k string, selectCols ...string) (*BookmarkSearchConfig, error) {
	bookmarkSearchConfigObj := &BookmarkSearchConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bookmark_search_config\" where \"k\"=?", sel,
	)

	q := queries.Raw(query, k)

	err := q.Bind(ctx, exec, bookmarkSearchConfigObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bookmark_search_config")
	}

	if err = bookmarkSearchConfigObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bookmarkSearchConfigObj, err
	}

	return bookmarkSearchConfigObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BookmarkSearchConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bookmark_search_config provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookmarkSearchConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookmarkSearchConfigInsertCacheMut.RLock()
	cache, cached := bookmarkSearchConfigInsertCache[key]
	bookmarkSearchConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookmarkSearchConfigAllColumns,
			bookmarkSearchConfigColumnsWithDefault,
			bookmarkSearchConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookmarkSearchConfigType, bookmarkSearchConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookmarkSearchConfigType, bookmarkSearchConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bookmark_search_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bookmark_search_config\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bookmark_search_config")
	}

	if !cached {
		bookmarkSearchConfigInsertCacheMut.Lock()
		bookmarkSearchConfigInsertCache[key] = cache
		bookmarkSearchConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BookmarkSearchConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BookmarkSearchConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookmarkSearchConfigUpdateCacheMut.RLock()
	cache, cached := bookmarkSearchConfigUpdateCache[key]
	bookmarkSearchConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookmarkSearchConfigAllColumns,
			bookmarkSearchConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bookmark_search_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bookmark_search_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, bookmarkSearchConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookmarkSearchConfigType, bookmarkSearchConfigMapping, append(wl, bookmarkSearchConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bookmark_search_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bookmark_search_config")
	}

	if !cached {
		bookmarkSearchConfigUpdateCacheMut.Lock()
		bookmarkSearchConfigUpdateCache[key] = cache
		bookmarkSearchConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bookmarkSearchConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bookmark_search_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bookmark_search_config")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookmarkSearchConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookmarkSearchConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bookmark_search_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookmarkSearchConfigPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bookmarkSearchConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bookmarkSearchConfig")
	}
	return rowsAff, nil
}

// Delete deletes a single BookmarkSearchConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BookmarkSearchConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BookmarkSearchConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookmarkSearchConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"bookmark_search_config\" WHERE \"k\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bookmark_search_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bookmark_search_config")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bookmarkSearchConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bookmarkSearchConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bookmark_search_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bookmark_search_config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookmarkSearchConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bookmarkSearchConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookmarkSearchConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bookmark_search_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookmarkSearchConfigPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bookmarkSearchConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bookmark_search_config")
	}

	if len(bookmarkSearchConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BookmarkSearchConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBookmarkSearchConfig(ctx, exec, o.K)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookmarkSearchConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookmarkSearchConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookmarkSearchConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bookmark_search_config\".* FROM \"bookmark_search_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookmarkSearchConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BookmarkSearchConfigSlice")
	}

	*o = slice

	return nil
}

// BookmarkSearchConfigExists checks if the BookmarkSearchConfig row exists.
func BookmarkSearchConfigExists(ctx context.Context, exec boil.ContextExecutor, k string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bookmark_search_config\" where \"k\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, k)
	}
	row := exec.QueryRowContext(ctx, sql, k)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bookmark_search_config exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BookmarkSearchConfig) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bookmark_search_config provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookmarkSearchConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookmarkSearchConfigUpsertCacheMut.RLock()
	cache, cached := bookmarkSearchConfigUpsertCache[key]
	bookmarkSearchConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bookmarkSearchConfigAllColumns,
			bookmarkSearchConfigColumnsWithDefault,
			bookmarkSearchConfigColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bookmarkSearchConfigAllColumns,
			bookmarkSearchConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bookmark_search_config, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bookmarkSearchConfigPrimaryKeyColumns))
			copy(conflict, bookmarkSearchConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"bookmark_search_config\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bookmarkSearchConfigType, bookmarkSearchConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookmarkSearchConfigType, bookmarkSearchConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bookmark_search_config")
	}

	if !cached {
		bookmarkSearchConfigUpsertCacheMut.Lock()
		bookmarkSearchConfigUpsertCache[key] = cache
		bookmarkSearchConfigUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
