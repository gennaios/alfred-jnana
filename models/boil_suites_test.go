// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Bookmarks", testBookmarks)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigs)
	t.Run("BookmarkSearchData", testBookmarkSearchData)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizes)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxes)
	t.Run("Creators", testCreators)
	t.Run("Files", testFiles)
	t.Run("FileSearchConfigs", testFileSearchConfigs)
	t.Run("FileSearchData", testFileSearchData)
	t.Run("FileSearchDocsizes", testFileSearchDocsizes)
	t.Run("FileSearchIdxes", testFileSearchIdxes)
	t.Run("Publishers", testPublishers)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigs)
	t.Run("PublisherSearchData", testPublisherSearchData)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizes)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxes)
	t.Run("Subjects", testSubjects)
}

func TestDelete(t *testing.T) {
	t.Run("Bookmarks", testBookmarksDelete)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsDelete)
	t.Run("BookmarkSearchData", testBookmarkSearchDataDelete)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesDelete)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesDelete)
	t.Run("Creators", testCreatorsDelete)
	t.Run("Files", testFilesDelete)
	t.Run("FileSearchConfigs", testFileSearchConfigsDelete)
	t.Run("FileSearchData", testFileSearchDataDelete)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesDelete)
	t.Run("FileSearchIdxes", testFileSearchIdxesDelete)
	t.Run("Publishers", testPublishersDelete)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsDelete)
	t.Run("PublisherSearchData", testPublisherSearchDataDelete)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesDelete)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesDelete)
	t.Run("Subjects", testSubjectsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Bookmarks", testBookmarksQueryDeleteAll)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsQueryDeleteAll)
	t.Run("BookmarkSearchData", testBookmarkSearchDataQueryDeleteAll)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesQueryDeleteAll)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesQueryDeleteAll)
	t.Run("Creators", testCreatorsQueryDeleteAll)
	t.Run("Files", testFilesQueryDeleteAll)
	t.Run("FileSearchConfigs", testFileSearchConfigsQueryDeleteAll)
	t.Run("FileSearchData", testFileSearchDataQueryDeleteAll)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesQueryDeleteAll)
	t.Run("FileSearchIdxes", testFileSearchIdxesQueryDeleteAll)
	t.Run("Publishers", testPublishersQueryDeleteAll)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsQueryDeleteAll)
	t.Run("PublisherSearchData", testPublisherSearchDataQueryDeleteAll)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesQueryDeleteAll)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesQueryDeleteAll)
	t.Run("Subjects", testSubjectsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Bookmarks", testBookmarksSliceDeleteAll)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsSliceDeleteAll)
	t.Run("BookmarkSearchData", testBookmarkSearchDataSliceDeleteAll)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesSliceDeleteAll)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesSliceDeleteAll)
	t.Run("Creators", testCreatorsSliceDeleteAll)
	t.Run("Files", testFilesSliceDeleteAll)
	t.Run("FileSearchConfigs", testFileSearchConfigsSliceDeleteAll)
	t.Run("FileSearchData", testFileSearchDataSliceDeleteAll)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesSliceDeleteAll)
	t.Run("FileSearchIdxes", testFileSearchIdxesSliceDeleteAll)
	t.Run("Publishers", testPublishersSliceDeleteAll)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsSliceDeleteAll)
	t.Run("PublisherSearchData", testPublisherSearchDataSliceDeleteAll)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesSliceDeleteAll)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesSliceDeleteAll)
	t.Run("Subjects", testSubjectsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Bookmarks", testBookmarksExists)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsExists)
	t.Run("BookmarkSearchData", testBookmarkSearchDataExists)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesExists)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesExists)
	t.Run("Creators", testCreatorsExists)
	t.Run("Files", testFilesExists)
	t.Run("FileSearchConfigs", testFileSearchConfigsExists)
	t.Run("FileSearchData", testFileSearchDataExists)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesExists)
	t.Run("FileSearchIdxes", testFileSearchIdxesExists)
	t.Run("Publishers", testPublishersExists)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsExists)
	t.Run("PublisherSearchData", testPublisherSearchDataExists)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesExists)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesExists)
	t.Run("Subjects", testSubjectsExists)
}

func TestFind(t *testing.T) {
	t.Run("Bookmarks", testBookmarksFind)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsFind)
	t.Run("BookmarkSearchData", testBookmarkSearchDataFind)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesFind)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesFind)
	t.Run("Creators", testCreatorsFind)
	t.Run("Files", testFilesFind)
	t.Run("FileSearchConfigs", testFileSearchConfigsFind)
	t.Run("FileSearchData", testFileSearchDataFind)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesFind)
	t.Run("FileSearchIdxes", testFileSearchIdxesFind)
	t.Run("Publishers", testPublishersFind)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsFind)
	t.Run("PublisherSearchData", testPublisherSearchDataFind)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesFind)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesFind)
	t.Run("Subjects", testSubjectsFind)
}

func TestBind(t *testing.T) {
	t.Run("Bookmarks", testBookmarksBind)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsBind)
	t.Run("BookmarkSearchData", testBookmarkSearchDataBind)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesBind)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesBind)
	t.Run("Creators", testCreatorsBind)
	t.Run("Files", testFilesBind)
	t.Run("FileSearchConfigs", testFileSearchConfigsBind)
	t.Run("FileSearchData", testFileSearchDataBind)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesBind)
	t.Run("FileSearchIdxes", testFileSearchIdxesBind)
	t.Run("Publishers", testPublishersBind)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsBind)
	t.Run("PublisherSearchData", testPublisherSearchDataBind)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesBind)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesBind)
	t.Run("Subjects", testSubjectsBind)
}

func TestOne(t *testing.T) {
	t.Run("Bookmarks", testBookmarksOne)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsOne)
	t.Run("BookmarkSearchData", testBookmarkSearchDataOne)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesOne)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesOne)
	t.Run("Creators", testCreatorsOne)
	t.Run("Files", testFilesOne)
	t.Run("FileSearchConfigs", testFileSearchConfigsOne)
	t.Run("FileSearchData", testFileSearchDataOne)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesOne)
	t.Run("FileSearchIdxes", testFileSearchIdxesOne)
	t.Run("Publishers", testPublishersOne)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsOne)
	t.Run("PublisherSearchData", testPublisherSearchDataOne)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesOne)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesOne)
	t.Run("Subjects", testSubjectsOne)
}

func TestAll(t *testing.T) {
	t.Run("Bookmarks", testBookmarksAll)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsAll)
	t.Run("BookmarkSearchData", testBookmarkSearchDataAll)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesAll)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesAll)
	t.Run("Creators", testCreatorsAll)
	t.Run("Files", testFilesAll)
	t.Run("FileSearchConfigs", testFileSearchConfigsAll)
	t.Run("FileSearchData", testFileSearchDataAll)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesAll)
	t.Run("FileSearchIdxes", testFileSearchIdxesAll)
	t.Run("Publishers", testPublishersAll)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsAll)
	t.Run("PublisherSearchData", testPublisherSearchDataAll)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesAll)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesAll)
	t.Run("Subjects", testSubjectsAll)
}

func TestCount(t *testing.T) {
	t.Run("Bookmarks", testBookmarksCount)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsCount)
	t.Run("BookmarkSearchData", testBookmarkSearchDataCount)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesCount)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesCount)
	t.Run("Creators", testCreatorsCount)
	t.Run("Files", testFilesCount)
	t.Run("FileSearchConfigs", testFileSearchConfigsCount)
	t.Run("FileSearchData", testFileSearchDataCount)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesCount)
	t.Run("FileSearchIdxes", testFileSearchIdxesCount)
	t.Run("Publishers", testPublishersCount)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsCount)
	t.Run("PublisherSearchData", testPublisherSearchDataCount)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesCount)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesCount)
	t.Run("Subjects", testSubjectsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Bookmarks", testBookmarksHooks)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsHooks)
	t.Run("BookmarkSearchData", testBookmarkSearchDataHooks)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesHooks)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesHooks)
	t.Run("Creators", testCreatorsHooks)
	t.Run("Files", testFilesHooks)
	t.Run("FileSearchConfigs", testFileSearchConfigsHooks)
	t.Run("FileSearchData", testFileSearchDataHooks)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesHooks)
	t.Run("FileSearchIdxes", testFileSearchIdxesHooks)
	t.Run("Publishers", testPublishersHooks)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsHooks)
	t.Run("PublisherSearchData", testPublisherSearchDataHooks)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesHooks)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesHooks)
	t.Run("Subjects", testSubjectsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Bookmarks", testBookmarksInsert)
	t.Run("Bookmarks", testBookmarksInsertWhitelist)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsInsert)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsInsertWhitelist)
	t.Run("BookmarkSearchData", testBookmarkSearchDataInsert)
	t.Run("BookmarkSearchData", testBookmarkSearchDataInsertWhitelist)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesInsert)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesInsertWhitelist)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesInsert)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesInsertWhitelist)
	t.Run("Creators", testCreatorsInsert)
	t.Run("Creators", testCreatorsInsertWhitelist)
	t.Run("Files", testFilesInsert)
	t.Run("Files", testFilesInsertWhitelist)
	t.Run("FileSearchConfigs", testFileSearchConfigsInsert)
	t.Run("FileSearchConfigs", testFileSearchConfigsInsertWhitelist)
	t.Run("FileSearchData", testFileSearchDataInsert)
	t.Run("FileSearchData", testFileSearchDataInsertWhitelist)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesInsert)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesInsertWhitelist)
	t.Run("FileSearchIdxes", testFileSearchIdxesInsert)
	t.Run("FileSearchIdxes", testFileSearchIdxesInsertWhitelist)
	t.Run("Publishers", testPublishersInsert)
	t.Run("Publishers", testPublishersInsertWhitelist)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsInsert)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsInsertWhitelist)
	t.Run("PublisherSearchData", testPublisherSearchDataInsert)
	t.Run("PublisherSearchData", testPublisherSearchDataInsertWhitelist)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesInsert)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesInsertWhitelist)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesInsert)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesInsertWhitelist)
	t.Run("Subjects", testSubjectsInsert)
	t.Run("Subjects", testSubjectsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BookmarkToFileUsingFile", testBookmarkToOneFileUsingFile)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("FileToBookmarks", testFileToManyBookmarks)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BookmarkToFileUsingBookmarks", testBookmarkToOneSetOpFileUsingFile)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("FileToBookmarks", testFileToManyAddOpBookmarks)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Bookmarks", testBookmarksReload)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsReload)
	t.Run("BookmarkSearchData", testBookmarkSearchDataReload)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesReload)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesReload)
	t.Run("Creators", testCreatorsReload)
	t.Run("Files", testFilesReload)
	t.Run("FileSearchConfigs", testFileSearchConfigsReload)
	t.Run("FileSearchData", testFileSearchDataReload)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesReload)
	t.Run("FileSearchIdxes", testFileSearchIdxesReload)
	t.Run("Publishers", testPublishersReload)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsReload)
	t.Run("PublisherSearchData", testPublisherSearchDataReload)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesReload)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesReload)
	t.Run("Subjects", testSubjectsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Bookmarks", testBookmarksReloadAll)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsReloadAll)
	t.Run("BookmarkSearchData", testBookmarkSearchDataReloadAll)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesReloadAll)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesReloadAll)
	t.Run("Creators", testCreatorsReloadAll)
	t.Run("Files", testFilesReloadAll)
	t.Run("FileSearchConfigs", testFileSearchConfigsReloadAll)
	t.Run("FileSearchData", testFileSearchDataReloadAll)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesReloadAll)
	t.Run("FileSearchIdxes", testFileSearchIdxesReloadAll)
	t.Run("Publishers", testPublishersReloadAll)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsReloadAll)
	t.Run("PublisherSearchData", testPublisherSearchDataReloadAll)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesReloadAll)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesReloadAll)
	t.Run("Subjects", testSubjectsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Bookmarks", testBookmarksSelect)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsSelect)
	t.Run("BookmarkSearchData", testBookmarkSearchDataSelect)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesSelect)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesSelect)
	t.Run("Creators", testCreatorsSelect)
	t.Run("Files", testFilesSelect)
	t.Run("FileSearchConfigs", testFileSearchConfigsSelect)
	t.Run("FileSearchData", testFileSearchDataSelect)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesSelect)
	t.Run("FileSearchIdxes", testFileSearchIdxesSelect)
	t.Run("Publishers", testPublishersSelect)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsSelect)
	t.Run("PublisherSearchData", testPublisherSearchDataSelect)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesSelect)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesSelect)
	t.Run("Subjects", testSubjectsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Bookmarks", testBookmarksUpdate)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsUpdate)
	t.Run("BookmarkSearchData", testBookmarkSearchDataUpdate)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesUpdate)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesUpdate)
	t.Run("Creators", testCreatorsUpdate)
	t.Run("Files", testFilesUpdate)
	t.Run("FileSearchConfigs", testFileSearchConfigsUpdate)
	t.Run("FileSearchData", testFileSearchDataUpdate)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesUpdate)
	t.Run("FileSearchIdxes", testFileSearchIdxesUpdate)
	t.Run("Publishers", testPublishersUpdate)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsUpdate)
	t.Run("PublisherSearchData", testPublisherSearchDataUpdate)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesUpdate)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesUpdate)
	t.Run("Subjects", testSubjectsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Bookmarks", testBookmarksSliceUpdateAll)
	t.Run("BookmarkSearchConfigs", testBookmarkSearchConfigsSliceUpdateAll)
	t.Run("BookmarkSearchData", testBookmarkSearchDataSliceUpdateAll)
	t.Run("BookmarkSearchDocsizes", testBookmarkSearchDocsizesSliceUpdateAll)
	t.Run("BookmarkSearchIdxes", testBookmarkSearchIdxesSliceUpdateAll)
	t.Run("Creators", testCreatorsSliceUpdateAll)
	t.Run("Files", testFilesSliceUpdateAll)
	t.Run("FileSearchConfigs", testFileSearchConfigsSliceUpdateAll)
	t.Run("FileSearchData", testFileSearchDataSliceUpdateAll)
	t.Run("FileSearchDocsizes", testFileSearchDocsizesSliceUpdateAll)
	t.Run("FileSearchIdxes", testFileSearchIdxesSliceUpdateAll)
	t.Run("Publishers", testPublishersSliceUpdateAll)
	t.Run("PublisherSearchConfigs", testPublisherSearchConfigsSliceUpdateAll)
	t.Run("PublisherSearchData", testPublisherSearchDataSliceUpdateAll)
	t.Run("PublisherSearchDocsizes", testPublisherSearchDocsizesSliceUpdateAll)
	t.Run("PublisherSearchIdxes", testPublisherSearchIdxesSliceUpdateAll)
	t.Run("Subjects", testSubjectsSliceUpdateAll)
}
