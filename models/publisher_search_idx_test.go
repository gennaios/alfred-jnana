// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testPublisherSearchIdxesUpsert(t *testing.T) {
	t.Parallel()
	if len(publisherSearchIdxAllColumns) == len(publisherSearchIdxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PublisherSearchIdx{}
	if err = randomize.Struct(seed, &o, publisherSearchIdxDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PublisherSearchIdx: %s", err)
	}

	count, err := PublisherSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, publisherSearchIdxDBTypes, false, publisherSearchIdxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PublisherSearchIdx: %s", err)
	}

	count, err = PublisherSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPublisherSearchIdxes(t *testing.T) {
	t.Parallel()

	query := PublisherSearchIdxes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPublisherSearchIdxesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherSearchIdxesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PublisherSearchIdxes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherSearchIdxesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublisherSearchIdxSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherSearchIdxesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PublisherSearchIdxExists(ctx, tx, o.Segid, o.Term)
	if err != nil {
		t.Errorf("Unable to check if PublisherSearchIdx exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PublisherSearchIdxExists to return true, but got false.")
	}
}

func testPublisherSearchIdxesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	publisherSearchIdxFound, err := FindPublisherSearchIdx(ctx, tx, o.Segid, o.Term)
	if err != nil {
		t.Error(err)
	}

	if publisherSearchIdxFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPublisherSearchIdxesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PublisherSearchIdxes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPublisherSearchIdxesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PublisherSearchIdxes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPublisherSearchIdxesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherSearchIdxOne := &PublisherSearchIdx{}
	publisherSearchIdxTwo := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, publisherSearchIdxOne, publisherSearchIdxDBTypes, false, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherSearchIdxTwo, publisherSearchIdxDBTypes, false, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = publisherSearchIdxOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publisherSearchIdxTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PublisherSearchIdxes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPublisherSearchIdxesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	publisherSearchIdxOne := &PublisherSearchIdx{}
	publisherSearchIdxTwo := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, publisherSearchIdxOne, publisherSearchIdxDBTypes, false, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherSearchIdxTwo, publisherSearchIdxDBTypes, false, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = publisherSearchIdxOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publisherSearchIdxTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func publisherSearchIdxBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchIdx) error {
	*o = PublisherSearchIdx{}
	return nil
}

func publisherSearchIdxAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchIdx) error {
	*o = PublisherSearchIdx{}
	return nil
}

func publisherSearchIdxAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchIdx) error {
	*o = PublisherSearchIdx{}
	return nil
}

func publisherSearchIdxBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchIdx) error {
	*o = PublisherSearchIdx{}
	return nil
}

func publisherSearchIdxAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchIdx) error {
	*o = PublisherSearchIdx{}
	return nil
}

func publisherSearchIdxBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchIdx) error {
	*o = PublisherSearchIdx{}
	return nil
}

func publisherSearchIdxAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchIdx) error {
	*o = PublisherSearchIdx{}
	return nil
}

func publisherSearchIdxBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchIdx) error {
	*o = PublisherSearchIdx{}
	return nil
}

func publisherSearchIdxAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSearchIdx) error {
	*o = PublisherSearchIdx{}
	return nil
}

func testPublisherSearchIdxesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PublisherSearchIdx{}
	o := &PublisherSearchIdx{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx object: %s", err)
	}

	AddPublisherSearchIdxHook(boil.BeforeInsertHook, publisherSearchIdxBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	publisherSearchIdxBeforeInsertHooks = []PublisherSearchIdxHook{}

	AddPublisherSearchIdxHook(boil.AfterInsertHook, publisherSearchIdxAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	publisherSearchIdxAfterInsertHooks = []PublisherSearchIdxHook{}

	AddPublisherSearchIdxHook(boil.AfterSelectHook, publisherSearchIdxAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	publisherSearchIdxAfterSelectHooks = []PublisherSearchIdxHook{}

	AddPublisherSearchIdxHook(boil.BeforeUpdateHook, publisherSearchIdxBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	publisherSearchIdxBeforeUpdateHooks = []PublisherSearchIdxHook{}

	AddPublisherSearchIdxHook(boil.AfterUpdateHook, publisherSearchIdxAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	publisherSearchIdxAfterUpdateHooks = []PublisherSearchIdxHook{}

	AddPublisherSearchIdxHook(boil.BeforeDeleteHook, publisherSearchIdxBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	publisherSearchIdxBeforeDeleteHooks = []PublisherSearchIdxHook{}

	AddPublisherSearchIdxHook(boil.AfterDeleteHook, publisherSearchIdxAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	publisherSearchIdxAfterDeleteHooks = []PublisherSearchIdxHook{}

	AddPublisherSearchIdxHook(boil.BeforeUpsertHook, publisherSearchIdxBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	publisherSearchIdxBeforeUpsertHooks = []PublisherSearchIdxHook{}

	AddPublisherSearchIdxHook(boil.AfterUpsertHook, publisherSearchIdxAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	publisherSearchIdxAfterUpsertHooks = []PublisherSearchIdxHook{}
}

func testPublisherSearchIdxesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublisherSearchIdxesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(publisherSearchIdxColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PublisherSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublisherSearchIdxesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPublisherSearchIdxesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublisherSearchIdxSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPublisherSearchIdxesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PublisherSearchIdxes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	publisherSearchIdxDBTypes = map[string]string{`Segid`: ``, `Term`: ``, `Pgno`: ``}
	_                         = bytes.MinRead
)

func testPublisherSearchIdxesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(publisherSearchIdxPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(publisherSearchIdxAllColumns) == len(publisherSearchIdxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPublisherSearchIdxesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(publisherSearchIdxAllColumns) == len(publisherSearchIdxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSearchIdx{}
	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publisherSearchIdxDBTypes, true, publisherSearchIdxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherSearchIdx struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(publisherSearchIdxAllColumns, publisherSearchIdxPrimaryKeyColumns) {
		fields = publisherSearchIdxAllColumns
	} else {
		fields = strmangle.SetComplement(
			publisherSearchIdxAllColumns,
			publisherSearchIdxPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PublisherSearchIdxSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
