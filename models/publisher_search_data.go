// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PublisherSearchDatum is an object representing the database table.
type PublisherSearchDatum struct {
	ID    null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Block null.Bytes `boil:"block" json:"block,omitempty" toml:"block" yaml:"block,omitempty"`

	R *publisherSearchDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L publisherSearchDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PublisherSearchDatumColumns = struct {
	ID    string
	Block string
}{
	ID:    "id",
	Block: "block",
}

var PublisherSearchDatumTableColumns = struct {
	ID    string
	Block string
}{
	ID:    "publisher_search_data.id",
	Block: "publisher_search_data.block",
}

// Generated where

var PublisherSearchDatumWhere = struct {
	ID    whereHelpernull_Int64
	Block whereHelpernull_Bytes
}{
	ID:    whereHelpernull_Int64{field: "\"publisher_search_data\".\"id\""},
	Block: whereHelpernull_Bytes{field: "\"publisher_search_data\".\"block\""},
}

// PublisherSearchDatumRels is where relationship names are stored.
var PublisherSearchDatumRels = struct {
}{}

// publisherSearchDatumR is where relationships are stored.
type publisherSearchDatumR struct {
}

// NewStruct creates a new relationship struct
func (*publisherSearchDatumR) NewStruct() *publisherSearchDatumR {
	return &publisherSearchDatumR{}
}

// publisherSearchDatumL is where Load methods for each relationship are stored.
type publisherSearchDatumL struct{}

var (
	publisherSearchDatumAllColumns            = []string{"id", "block"}
	publisherSearchDatumColumnsWithoutDefault = []string{"block"}
	publisherSearchDatumColumnsWithDefault    = []string{"id"}
	publisherSearchDatumPrimaryKeyColumns     = []string{"id"}
	publisherSearchDatumGeneratedColumns      = []string{}
)

type (
	// PublisherSearchDatumSlice is an alias for a slice of pointers to PublisherSearchDatum.
	// This should almost always be used instead of []PublisherSearchDatum.
	PublisherSearchDatumSlice []*PublisherSearchDatum
	// PublisherSearchDatumHook is the signature for custom PublisherSearchDatum hook methods
	PublisherSearchDatumHook func(context.Context, boil.ContextExecutor, *PublisherSearchDatum) error

	publisherSearchDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	publisherSearchDatumType                 = reflect.TypeOf(&PublisherSearchDatum{})
	publisherSearchDatumMapping              = queries.MakeStructMapping(publisherSearchDatumType)
	publisherSearchDatumPrimaryKeyMapping, _ = queries.BindMapping(publisherSearchDatumType, publisherSearchDatumMapping, publisherSearchDatumPrimaryKeyColumns)
	publisherSearchDatumInsertCacheMut       sync.RWMutex
	publisherSearchDatumInsertCache          = make(map[string]insertCache)
	publisherSearchDatumUpdateCacheMut       sync.RWMutex
	publisherSearchDatumUpdateCache          = make(map[string]updateCache)
	publisherSearchDatumUpsertCacheMut       sync.RWMutex
	publisherSearchDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var publisherSearchDatumAfterSelectHooks []PublisherSearchDatumHook

var publisherSearchDatumBeforeInsertHooks []PublisherSearchDatumHook
var publisherSearchDatumAfterInsertHooks []PublisherSearchDatumHook

var publisherSearchDatumBeforeUpdateHooks []PublisherSearchDatumHook
var publisherSearchDatumAfterUpdateHooks []PublisherSearchDatumHook

var publisherSearchDatumBeforeDeleteHooks []PublisherSearchDatumHook
var publisherSearchDatumAfterDeleteHooks []PublisherSearchDatumHook

var publisherSearchDatumBeforeUpsertHooks []PublisherSearchDatumHook
var publisherSearchDatumAfterUpsertHooks []PublisherSearchDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PublisherSearchDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSearchDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PublisherSearchDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSearchDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PublisherSearchDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSearchDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PublisherSearchDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSearchDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PublisherSearchDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSearchDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PublisherSearchDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSearchDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PublisherSearchDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSearchDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PublisherSearchDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSearchDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PublisherSearchDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSearchDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPublisherSearchDatumHook registers your hook function for all future operations.
func AddPublisherSearchDatumHook(hookPoint boil.HookPoint, publisherSearchDatumHook PublisherSearchDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		publisherSearchDatumAfterSelectHooks = append(publisherSearchDatumAfterSelectHooks, publisherSearchDatumHook)
	case boil.BeforeInsertHook:
		publisherSearchDatumBeforeInsertHooks = append(publisherSearchDatumBeforeInsertHooks, publisherSearchDatumHook)
	case boil.AfterInsertHook:
		publisherSearchDatumAfterInsertHooks = append(publisherSearchDatumAfterInsertHooks, publisherSearchDatumHook)
	case boil.BeforeUpdateHook:
		publisherSearchDatumBeforeUpdateHooks = append(publisherSearchDatumBeforeUpdateHooks, publisherSearchDatumHook)
	case boil.AfterUpdateHook:
		publisherSearchDatumAfterUpdateHooks = append(publisherSearchDatumAfterUpdateHooks, publisherSearchDatumHook)
	case boil.BeforeDeleteHook:
		publisherSearchDatumBeforeDeleteHooks = append(publisherSearchDatumBeforeDeleteHooks, publisherSearchDatumHook)
	case boil.AfterDeleteHook:
		publisherSearchDatumAfterDeleteHooks = append(publisherSearchDatumAfterDeleteHooks, publisherSearchDatumHook)
	case boil.BeforeUpsertHook:
		publisherSearchDatumBeforeUpsertHooks = append(publisherSearchDatumBeforeUpsertHooks, publisherSearchDatumHook)
	case boil.AfterUpsertHook:
		publisherSearchDatumAfterUpsertHooks = append(publisherSearchDatumAfterUpsertHooks, publisherSearchDatumHook)
	}
}

// One returns a single publisherSearchDatum record from the query.
func (q publisherSearchDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PublisherSearchDatum, error) {
	o := &PublisherSearchDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for publisher_search_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PublisherSearchDatum records from the query.
func (q publisherSearchDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (PublisherSearchDatumSlice, error) {
	var o []*PublisherSearchDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PublisherSearchDatum slice")
	}

	if len(publisherSearchDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PublisherSearchDatum records in the query.
func (q publisherSearchDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count publisher_search_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q publisherSearchDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if publisher_search_data exists")
	}

	return count > 0, nil
}

// PublisherSearchData retrieves all the records using an executor.
func PublisherSearchData(mods ...qm.QueryMod) publisherSearchDatumQuery {
	mods = append(mods, qm.From("\"publisher_search_data\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"publisher_search_data\".*"})
	}

	return publisherSearchDatumQuery{q}
}

// FindPublisherSearchDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPublisherSearchDatum(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*PublisherSearchDatum, error) {
	publisherSearchDatumObj := &PublisherSearchDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"publisher_search_data\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, publisherSearchDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from publisher_search_data")
	}

	if err = publisherSearchDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return publisherSearchDatumObj, err
	}

	return publisherSearchDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PublisherSearchDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no publisher_search_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publisherSearchDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	publisherSearchDatumInsertCacheMut.RLock()
	cache, cached := publisherSearchDatumInsertCache[key]
	publisherSearchDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			publisherSearchDatumAllColumns,
			publisherSearchDatumColumnsWithDefault,
			publisherSearchDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(publisherSearchDatumType, publisherSearchDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(publisherSearchDatumType, publisherSearchDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"publisher_search_data\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"publisher_search_data\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into publisher_search_data")
	}

	if !cached {
		publisherSearchDatumInsertCacheMut.Lock()
		publisherSearchDatumInsertCache[key] = cache
		publisherSearchDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PublisherSearchDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PublisherSearchDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	publisherSearchDatumUpdateCacheMut.RLock()
	cache, cached := publisherSearchDatumUpdateCache[key]
	publisherSearchDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			publisherSearchDatumAllColumns,
			publisherSearchDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update publisher_search_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"publisher_search_data\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, publisherSearchDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(publisherSearchDatumType, publisherSearchDatumMapping, append(wl, publisherSearchDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update publisher_search_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for publisher_search_data")
	}

	if !cached {
		publisherSearchDatumUpdateCacheMut.Lock()
		publisherSearchDatumUpdateCache[key] = cache
		publisherSearchDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q publisherSearchDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for publisher_search_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for publisher_search_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PublisherSearchDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherSearchDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"publisher_search_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, publisherSearchDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in publisherSearchDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all publisherSearchDatum")
	}
	return rowsAff, nil
}

// Delete deletes a single PublisherSearchDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PublisherSearchDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PublisherSearchDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), publisherSearchDatumPrimaryKeyMapping)
	sql := "DELETE FROM \"publisher_search_data\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from publisher_search_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for publisher_search_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q publisherSearchDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no publisherSearchDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publisher_search_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publisher_search_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PublisherSearchDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(publisherSearchDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherSearchDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"publisher_search_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, publisherSearchDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publisherSearchDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publisher_search_data")
	}

	if len(publisherSearchDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PublisherSearchDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPublisherSearchDatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PublisherSearchDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PublisherSearchDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherSearchDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"publisher_search_data\".* FROM \"publisher_search_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, publisherSearchDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PublisherSearchDatumSlice")
	}

	*o = slice

	return nil
}

// PublisherSearchDatumExists checks if the PublisherSearchDatum row exists.
func PublisherSearchDatumExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"publisher_search_data\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if publisher_search_data exists")
	}

	return exists, nil
}

// Exists checks if the PublisherSearchDatum row exists.
func (o *PublisherSearchDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PublisherSearchDatumExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PublisherSearchDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no publisher_search_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publisherSearchDatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	publisherSearchDatumUpsertCacheMut.RLock()
	cache, cached := publisherSearchDatumUpsertCache[key]
	publisherSearchDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			publisherSearchDatumAllColumns,
			publisherSearchDatumColumnsWithDefault,
			publisherSearchDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			publisherSearchDatumAllColumns,
			publisherSearchDatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert publisher_search_data, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(publisherSearchDatumPrimaryKeyColumns))
			copy(conflict, publisherSearchDatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"publisher_search_data\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(publisherSearchDatumType, publisherSearchDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(publisherSearchDatumType, publisherSearchDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert publisher_search_data")
	}

	if !cached {
		publisherSearchDatumUpsertCacheMut.Lock()
		publisherSearchDatumUpsertCache[key] = cache
		publisherSearchDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
