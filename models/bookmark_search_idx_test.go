// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testBookmarkSearchIdxesUpsert(t *testing.T) {
	t.Parallel()
	if len(bookmarkSearchIdxAllColumns) == len(bookmarkSearchIdxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BookmarkSearchIdx{}
	if err = randomize.Struct(seed, &o, bookmarkSearchIdxDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookmarkSearchIdx: %s", err)
	}

	count, err := BookmarkSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bookmarkSearchIdxDBTypes, false, bookmarkSearchIdxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookmarkSearchIdx: %s", err)
	}

	count, err = BookmarkSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBookmarkSearchIdxes(t *testing.T) {
	t.Parallel()

	query := BookmarkSearchIdxes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBookmarkSearchIdxesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookmarkSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookmarkSearchIdxesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BookmarkSearchIdxes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookmarkSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookmarkSearchIdxesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookmarkSearchIdxSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookmarkSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookmarkSearchIdxesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BookmarkSearchIdxExists(ctx, tx, o.Segid, o.Term)
	if err != nil {
		t.Errorf("Unable to check if BookmarkSearchIdx exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BookmarkSearchIdxExists to return true, but got false.")
	}
}

func testBookmarkSearchIdxesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bookmarkSearchIdxFound, err := FindBookmarkSearchIdx(ctx, tx, o.Segid, o.Term)
	if err != nil {
		t.Error(err)
	}

	if bookmarkSearchIdxFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBookmarkSearchIdxesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BookmarkSearchIdxes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBookmarkSearchIdxesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BookmarkSearchIdxes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBookmarkSearchIdxesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bookmarkSearchIdxOne := &BookmarkSearchIdx{}
	bookmarkSearchIdxTwo := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, bookmarkSearchIdxOne, bookmarkSearchIdxDBTypes, false, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}
	if err = randomize.Struct(seed, bookmarkSearchIdxTwo, bookmarkSearchIdxDBTypes, false, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookmarkSearchIdxOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookmarkSearchIdxTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookmarkSearchIdxes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBookmarkSearchIdxesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bookmarkSearchIdxOne := &BookmarkSearchIdx{}
	bookmarkSearchIdxTwo := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, bookmarkSearchIdxOne, bookmarkSearchIdxDBTypes, false, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}
	if err = randomize.Struct(seed, bookmarkSearchIdxTwo, bookmarkSearchIdxDBTypes, false, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookmarkSearchIdxOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookmarkSearchIdxTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bookmarkSearchIdxBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchIdx) error {
	*o = BookmarkSearchIdx{}
	return nil
}

func bookmarkSearchIdxAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchIdx) error {
	*o = BookmarkSearchIdx{}
	return nil
}

func bookmarkSearchIdxAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchIdx) error {
	*o = BookmarkSearchIdx{}
	return nil
}

func bookmarkSearchIdxBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchIdx) error {
	*o = BookmarkSearchIdx{}
	return nil
}

func bookmarkSearchIdxAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchIdx) error {
	*o = BookmarkSearchIdx{}
	return nil
}

func bookmarkSearchIdxBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchIdx) error {
	*o = BookmarkSearchIdx{}
	return nil
}

func bookmarkSearchIdxAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchIdx) error {
	*o = BookmarkSearchIdx{}
	return nil
}

func bookmarkSearchIdxBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchIdx) error {
	*o = BookmarkSearchIdx{}
	return nil
}

func bookmarkSearchIdxAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkSearchIdx) error {
	*o = BookmarkSearchIdx{}
	return nil
}

func testBookmarkSearchIdxesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BookmarkSearchIdx{}
	o := &BookmarkSearchIdx{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx object: %s", err)
	}

	AddBookmarkSearchIdxHook(boil.BeforeInsertHook, bookmarkSearchIdxBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchIdxBeforeInsertHooks = []BookmarkSearchIdxHook{}

	AddBookmarkSearchIdxHook(boil.AfterInsertHook, bookmarkSearchIdxAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchIdxAfterInsertHooks = []BookmarkSearchIdxHook{}

	AddBookmarkSearchIdxHook(boil.AfterSelectHook, bookmarkSearchIdxAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchIdxAfterSelectHooks = []BookmarkSearchIdxHook{}

	AddBookmarkSearchIdxHook(boil.BeforeUpdateHook, bookmarkSearchIdxBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchIdxBeforeUpdateHooks = []BookmarkSearchIdxHook{}

	AddBookmarkSearchIdxHook(boil.AfterUpdateHook, bookmarkSearchIdxAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchIdxAfterUpdateHooks = []BookmarkSearchIdxHook{}

	AddBookmarkSearchIdxHook(boil.BeforeDeleteHook, bookmarkSearchIdxBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchIdxBeforeDeleteHooks = []BookmarkSearchIdxHook{}

	AddBookmarkSearchIdxHook(boil.AfterDeleteHook, bookmarkSearchIdxAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchIdxAfterDeleteHooks = []BookmarkSearchIdxHook{}

	AddBookmarkSearchIdxHook(boil.BeforeUpsertHook, bookmarkSearchIdxBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchIdxBeforeUpsertHooks = []BookmarkSearchIdxHook{}

	AddBookmarkSearchIdxHook(boil.AfterUpsertHook, bookmarkSearchIdxAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bookmarkSearchIdxAfterUpsertHooks = []BookmarkSearchIdxHook{}
}

func testBookmarkSearchIdxesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookmarkSearchIdxesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bookmarkSearchIdxColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookmarkSearchIdxesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookmarkSearchIdxesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookmarkSearchIdxSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookmarkSearchIdxesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookmarkSearchIdxes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bookmarkSearchIdxDBTypes = map[string]string{`Segid`: ``, `Term`: ``, `Pgno`: ``}
	_                        = bytes.MinRead
)

func testBookmarkSearchIdxesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bookmarkSearchIdxPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bookmarkSearchIdxAllColumns) == len(bookmarkSearchIdxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBookmarkSearchIdxesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bookmarkSearchIdxAllColumns) == len(bookmarkSearchIdxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkSearchIdx{}
	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkSearchIdxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookmarkSearchIdxDBTypes, true, bookmarkSearchIdxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookmarkSearchIdx struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bookmarkSearchIdxAllColumns, bookmarkSearchIdxPrimaryKeyColumns) {
		fields = bookmarkSearchIdxAllColumns
	} else {
		fields = strmangle.SetComplement(
			bookmarkSearchIdxAllColumns,
			bookmarkSearchIdxPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BookmarkSearchIdxSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
